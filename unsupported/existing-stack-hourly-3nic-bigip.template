{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template for creating an 3nic Big-IP in an existing VPC **WARNING** This template creates Amazon EC2 Instances. You will be billed for the AWS resources used if you create a stack from this template.",
  "Mappings": {
    "BigipRegionMap": {
      "ap-northeast-1": {
        "Best": "ami-29e11229",
        "Better": "ami-c3f300c3",
        "Good": "ami-5bc23f5b"
      },
      "ap-southeast-1": {
        "Best": "ami-dcebdb8e",
        "Better": "ami-92eadac0",
        "Good": "ami-fc5764ae"
      },
      "ap-southeast-2": {
        "Best": "ami-eb5625d1",
        "Better": "ami-0b562531",
        "Good": "ami-e7e192dd"
      },
      "eu-west-1": {
        "Best": "ami-c7158db0",
        "Better": "ami-c9138bbe",
        "Good": "ami-695fc51e"
      },
      "sa-east-1": {
        "Best": "ami-0d7cc710",
        "Better": "ami-4d73c850",
        "Good": "ami-4b09b256"
      },
      "us-east-1": {
        "Best": "ami-7c9ab114",
        "Better": "ami-c281aaaa",
        "Good": "ami-488ca720"
      },
      "us-west-1": {
        "Best": "ami-614cad25",
        "Better": "ami-254dac61",
        "Good": "ami-f737d7b3"
      },
      "us-west-2": {
        "Best": "ami-d1735de1",
        "Better": "ami-2f755b1f",
        "Good": "ami-a1775991"
      }
    }
  },
  "Outputs": {
    "BigipExternalSecurityGroup": {
      "Description": "Public or External Security Group",
      "Value": {
        "Ref": "BigipExternalSecurityGroup"
      }
    },
    "BigipInstanceId": {
      "Description": "Instance Id of Big-IP in Amazon",
      "Value": {
        "Ref": "BigipInstance"
      }
    },
    "BigipInternalSecurityGroup": {
      "Description": "Private or Internal Security Group",
      "Value": {
        "Ref": "BigipInternalSecurityGroup"
      }
    },
    "BigipManagementSecurityGroup": {
      "Description": "Management Security Group",
      "Value": {
        "Ref": "BigipManagementSecurityGroup"
      }
    },
    "BigipUrl": {
      "Description": "Big-IP Management GUI",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "BigipInstance",
                "PublicIp"
              ]
            }
          ]
        ]
      }
    },
    "ExternalInterface": {
      "Description": "External interface Id on BIG-Ip",
      "Value": {
        "Ref": "ExternalInterface"
      }
    },
    "ExternalInterfacePrivateIp": {
      "Description": "Internally routable Ip of public interface on BIG-Ip",
      "Value": {
        "Fn::GetAtt": [
          "ExternalInterface",
          "PrimaryPrivateIpAddress"
        ]
      }
    },
    "ExternalSelfEipAddress": {
      "Description": "IP Address of External interface attached to BIG-IP",
      "Value": {
        "Ref": "ExternalSelfEipAddress"
      }
    },
    "InternalInterface": {
      "Description": "Internal interface ID on BIG-IP",
      "Value": {
        "Ref": "InternalInterface"
      }
    },
    "InternalInterfacePrivateIp": {
      "Description": "Internally routable IP of internal interface on BIG-IP",
      "Value": {
        "Fn::GetAtt": [
          "InternalInterface",
          "PrimaryPrivateIpAddress"
        ]
      }
    },
    "ManagementEipAddress": {
      "Description": "Ip address of management port on BIG-Ip",
      "Value": {
        "Ref": "ManagementEipAddress"
      }
    },
    "ManagementInterface": {
      "Description": "Management interface Id on BIG-Ip",
      "Value": {
        "Ref": "ManagementInterface"
      }
    },
    "ManagementInterfacePrivateIp": {
      "Description": "Internally routable Ip of management interface on BIG-Ip",
      "Value": {
        "Fn::GetAtt": [
          "ManagementInterface",
          "PrimaryPrivateIpAddress"
        ]
      }
    },
    "VipEipAddress": {
      "Description": "EIP address for VIP",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Ref": "VipEipAddress"
            },
            ":80"
          ]
        ]
      }
    },
    "VipPrivateIp": {
      "Description": "VIP on External Interface Secondary IP 1",
      "Value": {
        "Fn::Select": [
          "0",
          {
            "Fn::GetAtt": [
              "ExternalInterface",
              "SecondaryPrivateIpAddresses"
            ]
          }
        ]
      }
    }
  },
  "Parameters": {
    "Az1ExternalSubnet": {
      "ConstraintDescription": "Must be subnet ID within existing VPC",
      "Description": "Public or External subnet ID",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "Az1InternalSubnet": {
      "ConstraintDescription": "Must be subnet ID within existing VPC",
      "Description": "Private or Internal subnet ID",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "Az1ManagementSubnet": {
      "ConstraintDescription": "Must be subnet ID within existing VPC",
      "Description": "Management Subnet ID",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "BigipAdminPassword": {
      "ConstraintDescription": "Please verify your BIG-IP Admin Password",
      "Description": "Please enter your BIG-IP Admin Password",
      "MaxLength": "255",
      "MinLength": "1",
      "NoEcho": true,
      "Type": "String"
    },
    "BigipAdminUsername": {
      "ConstraintDescription": "Please verify your BIG-IP Admin Username",
      "Default": "admin",
      "Description": "Please enter your BIG-IP Admin Username",
      "MaxLength": "255",
      "MinLength": "1",
      "Type": "String"
    },
    "BigipExternalSecurityGroup": {
      "ConstraintDescription": "Must be security group ID within existing VPC",
      "Description": "Public or External Security Group ID",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "BigipInstanceType": {
      "AllowedValues": [
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "cc1.4xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid Big-IP EC2 instance type",
      "Default": "m3.xlarge",
      "Description": "F5 BIG-IP Virtual Instance Type",
      "Type": "String"
    },
    "BigipInternalSecurityGroup": {
      "ConstraintDescription": "Must be security group ID within existing VPC",
      "Description": "Private or Internal Security Group ID",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "BigipManagementSecurityGroup": {
      "ConstraintDescription": "Must be security group ID within existing VPC",
      "Description": "Bigip Management Security Group",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "BigipPerformanceType": {
      "AllowedValues": [
        "Good",
        "Better",
        "Best"
      ],
      "ConstraintDescription": "Must be a valid F5 Big-IP performance type",
      "Default": "Good",
      "Description": "F5 Bigip Performance Type",
      "Type": "String"
    },
    "DnsServers": {
      "AllowedPattern": "((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\s?)+",
      "ConstraintDescription": "Usually .2 for your VPC CIDR, ex. 10.0.0.2 for a 10.0.0.0/16 network",
      "Default": "10.0.0.2",
      "Description": "Space Seperated list of DNS Servers",
      "Type": "String"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "SSHLocation": {
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
      "Default": "0.0.0.0/0",
      "Description": " The IP address range that can be used to SSH to the EC2 instances",
      "MaxLength": "18",
      "MinLength": "9",
      "Type": "String"
    },
    "Vpc": {
      "ConstraintDescription": "Must be an existing VPC within working region.",
      "Type": "AWS::EC2::VPC::Id"
    },
    "WebserverPrivateIp": {
      "ConstraintDescription": "Web Server IP used for Big-IP pool Member",
      "Description": "Web Server IP used for Big-IP pool member",
      "Type": "String"
    }
  },
  "Resources": {
    "BigipInstance": {
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "commands": {
              "b-configure-Bigip": {
                "command": "/tmp/firstrun.sh\n"
              }
            },
            "files": {
              "/tmp/firstrun.config": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n",
                      "HOSTNAME=`curl http://169.254.169.254/latest/meta-data/hostname`\n",
                      "TZ='America/Los_Angeles'\n",
                      "BIGIP_ADMIN_USERNAME='",
                      {
                        "Ref": "BigipAdminUsername"
                      },
                      "'\n",
                      "BIGIP_ADMIN_PASSWORD='",
                      {
                        "Ref": "BigipAdminPassword"
                      },
                      "'\n",
                      "APPNAME='demo-app-1'\n",
                      "VIRTUALSERVERPORT=80\n",
                      "CRT='default.crt'\n",
                      "KEY='default.key'\n",
                      "NAME_SERVERS='",
                      {
                        "Ref": "DnsServers"
                      },
                      "'\n",
                      "POOLMEM='",
                      {
                        "Ref": "WebserverPrivateIp"
                      },
                      "'\n",
                      "POOLMEMPORT=80\n",
                      "MGMTIP='",
                      {
                        "Fn::GetAtt": [
                          "ManagementInterface",
                          "PrimaryPrivateIpAddress"
                        ]
                      },
                      "'\n",
                      "EXTIP='",
                      {
                        "Fn::GetAtt": [
                          "ExternalInterface",
                          "PrimaryPrivateIpAddress"
                        ]
                      },
                      "'\n",
                      "EXTPRIVIP='",
                      {
                        "Fn::Select": [
                          "0",
                          {
                            "Fn::GetAtt": [
                              "ExternalInterface",
                              "SecondaryPrivateIpAddresses"
                            ]
                          }
                        ]
                      },
                      "'\n",
                      "EXTMASK='24'\n",
                      "INTIP='",
                      {
                        "Fn::GetAtt": [
                          "InternalInterface",
                          "PrimaryPrivateIpAddress"
                        ]
                      },
                      "'\n",
                      "INTMASK='24'\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000777",
                "owner": "root"
              },
              "/tmp/firstrun.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n",
                      ". /tmp/firstrun.config\n",
                      "FILE=/tmp/firstrun.log\n",
                      "if [ ! -e $FILE ]\n",
                      " then\n",
                      "     touch $FILE\n",
                      "     nohup $0 0<&- &>/dev/null &\n",
                      "     exit\n",
                      "fi\n",
                      "function checkF5Ready {\n",
                      "     sleep 5\n",
                      "     while [[ ! -e '/var/prompt/ps1' ]]\n",
                      " do\n",
                      "     echo -n '.'\n",
                      "     sleep 5\n",
                      "done \n",
                      "sleep 5\n",
                      "STATUS=`cat /var/prompt/ps1`\n",
                      "while [[ ${STATUS}x != 'NO LICENSE'x ]]\n",
                      " do\n",
                      "     echo -n '.'\n",
                      "     sleep 5\n",
                      "     STATUS=`cat /var/prompt/ps1`\n",
                      "done\n",
                      "echo -n ' '\n",
                      "while [[ ! -e '/var/prompt/cmiSyncStatus' ]]\n",
                      " do\n",
                      "     echo -n '.'\n",
                      "     sleep 5\n",
                      "done \n",
                      "STATUS=`cat /var/prompt/cmiSyncStatus`\n",
                      "while [[ ${STATUS}x != 'Standalone'x ]]\n",
                      " do\n",
                      "     echo -n '.'\n",
                      "     sleep 5\n",
                      "     STATUS=`cat /var/prompt/cmiSyncStatus`\n",
                      "done\n",
                      "}\n",
                      "function checkStatusnoret {\n",
                      "sleep 10\n",
                      "STATUS=`cat /var/prompt/ps1`\n",
                      "while [[ ${STATUS}x != 'Active'x ]]\n",
                      " do\n",
                      "     echo -n '.'\n",
                      "     sleep 5\n",
                      "     STATUS=`cat /var/prompt/ps1`\n",
                      "done\n",
                      "}\n",
                      "exec 1<&-\n",
                      "exec 2<&-\n",
                      "exec 1<>$FILE\n",
                      "exec 2>&1\n",
                      "checkF5Ready\n",
                      "sleep 150\n",
                      "logger -p local0.info 'firstrun debug: starting-tmsh-config'\n",
                      "tmsh modify /sys global-settings hostname ${HOSTNAME}\n",
                      "tmsh mv cm device bigip1 ${HOSTNAME}\n",
                      "tmsh modify auth password root <<< $'${BIGIP_ADMIN_PASSWORD}\n${BIGIP_ADMIN_PASSWORD}\n'\n",
                      "tmsh modify auth user admin password \"'${BIGIP_ADMIN_PASSWORD}'\"\n",
                      "tmsh modify sys ntp timezone ${TZ}\n",
                      "tmsh modify sys ntp servers add { 0.pool.ntp.org 1.pool.ntp.org }\n",
                      "tmsh modify sys dns name-servers add { ${NAME_SERVERS} }\n",
                      "tmsh save /sys config\n",
                      "checkStatusnoret\n",
                      "sleep 30\n",
                      "tmsh save /sys config\n",
                      "tmsh modify sys db dhclient.mgmt { value disable }\n",
                      "tmsh modify sys global-settings gui-setup disabled\n",
                      "checkStatusnoret\n",
                      "tmsh create net vlan external interfaces add { 1.1 } \n",
                      "tmsh create net self ${EXTIP}/${EXTMASK} vlan external allow-service add { tcp:4353 udp:1026 }\n",
                      "tmsh create net route default gw 10.0.1.1\n",
                      "tmsh create net vlan internal interfaces add { 1.2 } \n",
                      "tmsh create net self ${INTIP}/${INTMASK} vlan internal allow-service default\n",
                      "tmsh save /sys config\n",
                      "checkStatusnoret\n",
                      "tmsh create ltm pool ${APPNAME}-pool members add { ${POOLMEM}:${POOLMEMPORT} } monitor http\n",
                      "tmsh create ltm virtual /Common/${APPNAME}-${VIRTUALSERVERPORT} { destination ${EXTPRIVIP}:${VIRTUALSERVERPORT} ip-protocol tcp mask 255.255.255.255 pool /Common/${APPNAME}-pool source 0.0.0.0/0 source-address-translation { type automap } translate-address enabled translate-port enabled }\n",
                      "tmsh save /sys config\n",
                      "# for security purposes, remove firstrun.config\n",
                      "# rm /tmp/firstrun.config\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000777",
                "owner": "root"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "BigipRegionMap",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "BigipPerformanceType"
            }
          ]
        },
        "InstanceType": {
          "Ref": "BigipInstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "NetworkInterfaces": [
          {
            "Description": "Management Interface",
            "DeviceIndex": "0",
            "NetworkInterfaceId": {
              "Ref": "ManagementInterface"
            }
          },
          {
            "Description": "Public or External Interface",
            "DeviceIndex": "1",
            "NetworkInterfaceId": {
              "Ref": "ExternalInterface"
            }
          },
          {
            "Description": "Private or Internal Interface",
            "DeviceIndex": "2",
            "NetworkInterfaceId": {
              "Ref": "InternalInterface"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "Big-IP: ",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r BigipInstance ",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::EC2::Instance"
    },
    "ExternalInterface": {
      "Properties": {
        "Description": "Public External Interface for the Bigip",
        "GroupSet": [
          {
            "Ref": "BigipExternalSecurityGroup"
          }
        ],
        "SecondaryPrivateIpAddressCount": "1",
        "SubnetId": {
          "Ref": "Az1ExternalSubnet"
        }
      },
      "Type": "AWS::EC2::NetworkInterface"
    },
    "ExternalSelfEipAddress": {
      "Properties": {
        "Domain": "vpc"
      },
      "Type": "AWS::EC2::EIP"
    },
    "ExternalSelfEipAssociation": {
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "ExternalSelfEipAddress",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "ExternalInterface"
        },
        "PrivateIpAddress": {
          "Fn::GetAtt": [
            "ExternalInterface",
            "PrimaryPrivateIpAddress"
          ]
        }
      },
      "Type": "AWS::EC2::EIPAssociation"
    },
    "InternalInterface": {
      "Properties": {
        "Description": "Internal Interface for the Bigip",
        "GroupSet": [
          {
            "Ref": "BigipInternalSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "Az1InternalSubnet"
        }
      },
      "Type": "AWS::EC2::NetworkInterface"
    },
    "ManagementEipAddress": {
      "Properties": {
        "Domain": "vpc"
      },
      "Type": "AWS::EC2::EIP"
    },
    "ManagementEipAssociation": {
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "ManagementEipAddress",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "ManagementInterface"
        }
      },
      "Type": "AWS::EC2::EIPAssociation"
    },
    "ManagementInterface": {
      "Properties": {
        "Description": "Management Interface for the Bigip",
        "GroupSet": [
          {
            "Ref": "BigipManagementSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "Az1ManagementSubnet"
        }
      },
      "Type": "AWS::EC2::NetworkInterface"
    },
    "VipEipAddress": {
      "Properties": {
        "Domain": "vpc"
      },
      "Type": "AWS::EC2::EIP"
    },
    "VipEipAssociation": {
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "VipEipAddress",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "ExternalInterface"
        },
        "PrivateIpAddress": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAtt": [
                "ExternalInterface",
                "SecondaryPrivateIpAddresses"
              ]
            }
          ]
        }
      },
      "Type": "AWS::EC2::EIPAssociation"
    }
  }
}
