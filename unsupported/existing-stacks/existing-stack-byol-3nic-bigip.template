{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation Template for creating an 3nic Big-IP in an existing VPC **WARNING** This template creates Amazon EC2 Instances. You will be billed for the AWS resources used if you create a stack from this template.",
    "Mappings": {
        "BigIPRegionMap": {
            "ap-northeast-1": {
                "Best": "ami-bcf69bbc",
                "Better": "ami-d6f69bd6",
                "Good": "ami-1ef69b1e"
            },
            "ap-southeast-1": {
                "Best": "ami-3c9a896e",
                "Better": "ami-249a8976",
                "Good": "ami-029a8950"
            },
            "ap-southeast-2": {
                "Best": "ami-bfd69c85",
                "Better": "ami-45d69c7f",
                "Good": "ami-63d69c59"
            },
            "eu-west-1": {
                "Best": "ami-3798a740",
                "Better": "ami-2b98a75c",
                "Good": "ami-f799a680"
            },
            "sa-east-1": {
                "Best": "ami-a3952dcf",
                "Better": "ami-f69e269a",
                "Good": "ami-36962e5a"
            },
            "us-east-1": {
                "Best": "ami-98715bf0",
                "Better": "ami-f1421d94",
                "Good": "ami-03421d66"
            },
            "us-west-1": {
                "Best": "ami-a70bc8e3",
                "Better": "ami-af0bc8eb",
                "Good": "ami-e90bc8ad"
            },
            "us-west-2": {
                "Best": "ami-e2d735d1",
                "Better": "ami-ccd735ff",
                "Good": "ami-36d73505"
            }
        }
    },
    "Outputs": {
        "AvailabilityZone": {
            "Description": "Availability Zone",
            "Value": {
                "Fn::GetAtt": [
                    "BigIPInstance",
                    "AvailabilityZone"
                ]
            }
        },
        "Az1ExternalSubnetId": {
            "Description": "Az1 Public or External Subnet Id",
            "Value": {
                "Ref": "ExternalSubnetId"
            }
        },
        "BigIPExternalSecurityGroupId": {
            "Description": "Public or External Security Group",
            "Value": {
                "Ref": "BigIPExternalSecurityGroupId"
            }
        },
        "BigIPInstanceId": {
            "Description": "Instance ID of Big-IP in Amazon",
            "Value": {
                "Ref": "BigIPInstance"
            }
        },
        "BigIPInternalSecurityGroupID": {
            "Description": "Private or Internal Security Group",
            "Value": {
                "Ref": "BigIPInternalSecurityGroupId"
            }
        },
        "BigIPManagementSecurityGroupId": {
            "Description": "Big-IP Management Security Group",
            "Value": {
                "Ref": "BigIPManagementSecurityGroupId"
            }
        },
        "BigIPUrl": {
            "Description": "BigIP Management GUI",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "BigIPInstance",
                                "PublicIp"
                            ]
                        }
                    ]
                ]
            }
        },
        "ExternalInterfaceId": {
            "Description": "External interface ID on BIG-IP",
            "Value": {
                "Ref": "ExternalInterface"
            }
        },
        "ExternalInterfacePrivateIp": {
            "Description": "Internally routable IP of public interface on BIG-IP",
            "Value": {
                "Fn::GetAtt": [
                    "ExternalInterface",
                    "PrimaryPrivateIpAddress"
                ]
            }
        },
        "InternalInterfaceId": {
            "Description": "Internal interface ID on BIG-IP",
            "Value": {
                "Ref": "InternalInterface"
            }
        },
        "InternalInterfacePrivateIp": {
            "Description": "Internally routable IP of internal interface on BIG-IP",
            "Value": {
                "Fn::GetAtt": [
                    "InternalInterface",
                    "PrimaryPrivateIpAddress"
                ]
            }
        },
        "ManagementEipAddress": {
            "Description": "IP address of management port on BIG-IP",
            "Value": {
                "Ref": "ManagementEipAddress"
            }
        },
        "ManagementInterfaceId": {
            "Description": "Management interface ID on BIG-IP",
            "Value": {
                "Ref": "ManagementInterface"
            }
        },
        "ManagementInterfacePrivateIp": {
            "Description": "Internally routable IP of management interface on BIG-IP",
            "Value": {
                "Fn::GetAtt": [
                    "ManagementInterface",
                    "PrimaryPrivateIpAddress"
                ]
            }
        },
        "VipEipAddress": {
            "Description": "EIP address for VIP",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Ref": "VipEipAddress"
                        },
                        ":80"
                    ]
                ]
            }
        },
        "ViprivateIp": {
            "Description": "VIP on External Interface Secondary IP 1",
            "Value": {
                "Fn::Select": [
                    "0",
                    {
                        "Fn::GetAtt": [
                            "ExternalInterface",
                            "SecondaryPrivateIpAddresses"
                        ]
                    }
                ]
            }
        },
        "VpcID": {
            "Description": "VPC ID",
            "Value": {
                "Ref": "VPC"
            }
        }
    },
    "Parameters": {
        "BigIPAdminPassword": {
            "ConstraintDescription": "Please verify your BIG-IP Admin Password",
            "Description": "Please enter your BIG-IP Admin Password",
            "MaxLength": "255",
            "MinLength": "1",
            "NoEcho": true,
            "Type": "String"
        },
        "BigIPAdminUsername": {
            "ConstraintDescription": "Please verify your BIG-IP Admin Username",
            "Default": "admin",
            "Description": "Please enter your BIG-IP Admin Username",
            "MaxLength": "255",
            "MinLength": "1",
            "Type": "String"
        },
        "BigIPExternalSecurityGroupId": {
            "ConstraintDescription": "Must be security group ID within existing VPC",
            "Description": "Public or External Security Group ID",
            "Type": "AWS::EC2::SecurityGroup::Id"
        },
        "BigIPInstanceType": {
            "AllowedValues": [
                "m3.xlarge",
                "m3.2xlarge",
                "c1.medium",
                "c1.xlarge",
                "cc1.4xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "must be a valid Big-IP EC2 instance type",
            "Default": "m3.xlarge",
            "Description": "F5 BIG-IP Virtual Instance Type",
            "Type": "String"
        },
        "BigIPInternalSecurityGroupId": {
            "ConstraintDescription": "Must be security group ID within existing VPC",
            "Description": "Private or Internal Security Group ID",
            "Type": "AWS::EC2::SecurityGroup::Id"
        },
        "BigIPManagementSecurityGroupId": {
            "ConstraintDescription": "Must be security group ID within existing VPC",
            "Description": "BigIP Management Security Group",
            "Type": "AWS::EC2::SecurityGroup::Id"
        },
        "BigIPPerformanceType": {
            "AllowedValues": [
                "Good",
                "Better",
                "Best"
            ],
            "ConstraintDescription": "Must be a valid F5 Big-IP performance type",
            "Default": "Good",
            "Description": "F5 BigIP Performance Type",
            "Type": "String"
        },
        "ExternalSubnetId": {
            "ConstraintDescription": "Must be subnet ID within existing VPC",
            "Description": "Public or External subnet ID",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "InternalSubnetId": {
            "ConstraintDescription": "Must be subnet ID within existing VPC",
            "Description": "Private or Internal subnet ID",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "LicenseKey": {
            "AllowedPattern": "([\\x41-\\x5A][\\x41-\\x5A|\\x30-\\x39]{4})\\-([\\x41-\\x5A|\\x30-\\x39]{5})\\-([\\x41-\\x5A|\\x30-\\x39]{5})\\-([\\x41-\\x5A|\\x30-\\x39]{5})\\-([\\x41-\\x5A|\\x30-\\x39]{7})",
            "ConstraintDescription": "Please verify your F5 BYOL regkey.",
            "Description": "Please enter your F5 BYOL regkey here:",
            "MaxLength": "255",
            "MinLength": "1",
            "Type": "String"
        },
        "ManagementSubnetId": {
            "ConstraintDescription": "Must be subnet ID within existing VPC",
            "Description": "Management Subnet ID",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "SSHLocation": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Default": "0.0.0.0/0",
            "Description": " The IP address range that can be used to SSH to the EC2 instances",
            "MaxLength": "18",
            "MinLength": "9",
            "Type": "String"
        },
        "VPC": {
            "ConstraintDescription": "Must be an existing VPC within working region.",
            "Type": "AWS::EC2::VPC::Id"
        },
        "Webserver": {
            "ConstraintDescription": "Web Server IP used for Big-IP pool Member",
            "Description": "Web Server IP used for Big-IP pool member",
            "Type": "String"
        }
    },
    "Resources": {
        "BigIPInstance": {
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "b-configure-BigIP": {
                                "command": "/tmp/firstrun.sh\n"
                            }
                        },
                        "files": {
                            "/tmp/firstrun.config": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "HOSTNAME=`curl http://169.254.169.254/latest/meta-data/hostname`\n",
                                            "REGKEY='",
                                            {
                                                "Ref": "LicenseKey"
                                            },
                                            "'\n",
                                            "TZ='America/Los_Angeles'\n",
                                            "MGMTIP='",
                                            {
                                                "Fn::GetAtt": [
                                                    "ManagementInterface",
                                                    "PrimaryPrivateIpAddress"
                                                ]
                                            },
                                            "'\n",
                                            "EXTIP='",
                                            {
                                                "Fn::GetAtt": [
                                                    "ExternalInterface",
                                                    "PrimaryPrivateIpAddress"
                                                ]
                                            },
                                            "'\n",
                                            "EXTPRIVIP='",
                                            {
                                                "Fn::Select": [
                                                    "0",
                                                    {
                                                        "Fn::GetAtt": [
                                                            "ExternalInterface",
                                                            "SecondaryPrivateIpAddresses"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "'\n",
                                            "INTIP='",
                                            {
                                                "Fn::GetAtt": [
                                                    "InternalInterface",
                                                    "PrimaryPrivateIpAddress"
                                                ]
                                            },
                                            "'\n",
                                            "EXTMASK='24'\n",
                                            "INTMASK='24'\n",
                                            "BIGIP_ADMIN_USERNAME='",
                                            {
                                                "Ref": "BigIPAdminUsername"
                                            },
                                            "'\n",
                                            "BIGIP_ADMIN_PASSWORD='",
                                            {
                                                "Ref": "BigIPAdminPassword"
                                            },
                                            "'\n",
                                            "APPNAME='demo-app-1'\n",
                                            "VIRTUALSERVERPORT=80\n",
                                            "POOLMEM='",
                                            {
                                                "Ref": "Webserver"
                                            },
                                            "'\n",
                                            "POOLMEMPORT=80\n",
                                            "CRT='default.crt'\n",
                                            "KEY='default.key'\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000777",
                                "owner": "root"
                            },
                            "/tmp/firstrun.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            ". /tmp/firstrun.config\n",
                                            "FILE=/tmp/firstrun.log\n",
                                            "if [ ! -e $FILE ]\n",
                                            " then\n",
                                            "     touch $FILE\n",
                                            "     nohup $0 0<&- &>/dev/null &\n",
                                            "     exit\n",
                                            "fi\n",
                                            "function checkF5Ready {\n",
                                            "     sleep 5\n",
                                            "     while [[ ! -e '/var/prompt/ps1' ]]\n",
                                            " do\n",
                                            "     echo -n '.'\n",
                                            "     sleep 5\n",
                                            "done \n",
                                            "sleep 5\n",
                                            "STATUS=`cat /var/prompt/ps1`\n",
                                            "while [[ ${STATUS}x != 'NO LICENSE'x ]]\n",
                                            " do\n",
                                            "     echo -n '.'\n",
                                            "     sleep 5\n",
                                            "     STATUS=`cat /var/prompt/ps1`\n",
                                            "done\n",
                                            "echo -n ' '\n",
                                            "while [[ ! -e '/var/prompt/cmiSyncStatus' ]]\n",
                                            " do\n",
                                            "     echo -n '.'\n",
                                            "     sleep 5\n",
                                            "done \n",
                                            "STATUS=`cat /var/prompt/cmiSyncStatus`\n",
                                            "while [[ ${STATUS}x != 'Standalone'x ]]\n",
                                            " do\n",
                                            "     echo -n '.'\n",
                                            "     sleep 5\n",
                                            "     STATUS=`cat /var/prompt/cmiSyncStatus`\n",
                                            "done\n",
                                            "}\n",
                                            "function checkStatusnoret {\n",
                                            "sleep 10\n",
                                            "STATUS=`cat /var/prompt/ps1`\n",
                                            "while [[ ${STATUS}x != 'Active'x ]]\n",
                                            " do\n",
                                            "     echo -n '.'\n",
                                            "     sleep 5\n",
                                            "     STATUS=`cat /var/prompt/ps1`\n",
                                            "done\n",
                                            "}\n",
                                            "exec 1<&-\n",
                                            "exec 2<&-\n",
                                            "exec 1<>$FILE\n",
                                            "exec 2>&1\n",
                                            "checkF5Ready\n",
                                            "tmsh modify /sys global-settings hostname ${HOSTNAME}\n",
                                            "tmsh mv cm device bigip1 ${HOSTNAME}\n",
                                            "tmsh modify auth password root <<< $'${BIGIP_ADMIN_PASSWORD}\n${BIGIP_ADMIN_PASSWORD}\n'\n",
                                            "tmsh modify auth user admin password \"'${BIGIP_ADMIN_PASSWORD}'\"\n",
                                            "tmsh save /sys config\n",
                                            "tmsh install /sys license registration-key ${REGKEY} license-server activate.f5.com\n",
                                            "tmsh save /sys config\n",
                                            "checkF5Ready\n",
                                            "checkStatusnoret\n",
                                            "sleep 20\n",
                                            "tmsh modify sys db dhclient.mgmt { value disable }\n",
                                            "tmsh modify sys ntp timezone ${TZ}\n",
                                            "tmsh modify sys ntp servers add { 0.pool.ntp.org 1.pool.ntp.org }\n",
                                            "tmsh modify sys global-settings gui-setup disabled\n",
                                            "tmsh create net vlan external interfaces add { 1.1 } \n",
                                            "tmsh create net vlan internal interfaces add { 1.2 } \n",
                                            "tmsh create net self ${EXTIP}/${EXTMASK} vlan external allow-service add { tcp:4353 udp:1026 }\n",
                                            "tmsh create net self ${INTIP}/${INTMASK} vlan internal allow-service default\n",
                                            "tmsh create net route default gw 10.0.1.1\n",
                                            "tmsh save /sys config\n",
                                            "tmsh create ltm pool ${APPNAME}-pool members add { ${POOLMEM}:${POOLMEMPORT} } monitor gateway_icmp\n",
                                            "tmsh create ltm virtual /Common/${APPNAME}-${VIRTUALSERVERPORT} { destination ${EXTPRIVIP}:${VIRTUALSERVERPORT} ip-protocol tcp mask 255.255.255.255 pool /Common/${APPNAME}-pool source 0.0.0.0/0 source-address-translation { type automap } translate-address enabled translate-port enabled }\n",
                                            "tmsh save /sys config\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000777",
                                "owner": "root"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "BigIPRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Ref": "BigIPPerformanceType"
                        }
                    ]
                },
                "InstanceType": {
                    "Ref": "BigIPInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "NetworkInterfaces": [
                    {
                        "Description": "Management Interface",
                        "DeviceIndex": "0",
                        "NetworkInterfaceId": {
                            "Ref": "ManagementInterface"
                        }
                    },
                    {
                        "Description": "Public or External Interface",
                        "DeviceIndex": "1",
                        "NetworkInterfaceId": {
                            "Ref": "ExternalInterface"
                        }
                    },
                    {
                        "Description": "Private or Internal Interface",
                        "DeviceIndex": "2",
                        "NetworkInterfaceId": {
                            "Ref": "InternalInterface"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r BigIPInstance ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "ExternalInterface": {
            "Properties": {
                "Description": "Public External Interface for the BigIP",
                "GroupSet": [
                    {
                        "Ref": "BigIPExternalSecurityGroupId"
                    }
                ],
                "SecondaryPrivateIpAddressCount": "1",
                "SubnetId": {
                    "Ref": "ExternalSubnetId"
                }
            },
            "Type": "AWS::EC2::NetworkInterface"
        },
        "ExternalSelfEipAddress": {
            "Properties": {
                "Domain": "vpc"
            },
            "Type": "AWS::EC2::EIP"
        },
        "ExternalSelfEipAssociation": {
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "ExternalSelfEipAddress",
                        "AllocationId"
                    ]
                },
                "NetworkInterfaceId": {
                    "Ref": "ExternalInterface"
                },
                "PrivateIpAddress": {
                    "Fn::GetAtt": [
                        "ExternalInterface",
                        "PrimaryPrivateIpAddress"
                    ]
                }
            },
            "Type": "AWS::EC2::EIPAssociation"
        },
        "InternalInterface": {
            "Properties": {
                "Description": "Management Interface for the BigIP",
                "GroupSet": [
                    {
                        "Ref": "BigIPInternalSecurityGroupId"
                    }
                ],
                "SubnetId": {
                    "Ref": "InternalSubnetId"
                }
            },
            "Type": "AWS::EC2::NetworkInterface"
        },
        "ManagementEipAddress": {
            "Properties": {
                "Domain": "vpc"
            },
            "Type": "AWS::EC2::EIP"
        },
        "ManagementEipAssociation": {
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "ManagementEipAddress",
                        "AllocationId"
                    ]
                },
                "NetworkInterfaceId": {
                    "Ref": "ManagementInterface"
                }
            },
            "Type": "AWS::EC2::EIPAssociation"
        },
        "ManagementInterface": {
            "Properties": {
                "Description": "Management Interface for the BigIP",
                "GroupSet": [
                    {
                        "Ref": "BigIPManagementSecurityGroupId"
                    }
                ],
                "SubnetId": {
                    "Ref": "ManagementSubnetId"
                }
            },
            "Type": "AWS::EC2::NetworkInterface"
        },
        "VipEipAddress": {
            "Properties": {
                "Domain": "vpc"
            },
            "Type": "AWS::EC2::EIP"
        },
        "VipEipAssociation": {
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "VipEipAddress",
                        "AllocationId"
                    ]
                },
                "NetworkInterfaceId": {
                    "Ref": "ExternalInterface"
                },
                "PrivateIpAddress": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAtt": [
                                "ExternalInterface",
                                "SecondaryPrivateIpAddresses"
                            ]
                        }
                    ]
                }
            },
            "Type": "AWS::EC2::EIPAssociation"
        }
    }
}
