{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template for creating a 3nic Big-IP in an existing VPC **WARNING** This template creates Amazon EC2 Instances. You will be billed for the AWS resources used if you create a stack from this template.",
  "Mappings": {
    "BigipRegionMap": {
      "ap-northeast-1": {
        "Best": "ami-9f1704f1",
        "Better": "ami-06687b68",
        "Good": "ami-6410030a"
      },
      "ap-southeast-1": {
        "Best": "ami-93f82df0",
        "Better": "ami-1ff82d7c",
        "Good": "ami-89fe2bea"
      },
      "ap-southeast-2": {
        "Best": "ami-bc486adf",
        "Better": "ami-8a4466e9",
        "Good": "ami-be486add"
      },
      "eu-west-1": {
        "Best": "ami-28c84b5b",
        "Better": "ami-87c94af4",
        "Good": "ami-17ca4964"
      },
      "sa-east-1": {
        "Best": "ami-8f20afe3",
        "Better": "ami-8e20afe2",
        "Good": "ami-8b2aa5e7"
      },
      "us-east-1": {
        "Best": "ami-b89284d2",
        "Better": "ami-a39583c9",
        "Good": "ami-809284ea"
      },
      "us-west-1": {
        "Best": "ami-25b5c945",
        "Better": "ami-99b3cff9",
        "Good": "ami-98b3cff8"
      },
      "us-west-2": {
        "Best": "ami-5fe81c3f",
        "Better": "ami-a2ec18c2",
        "Good": "ami-6bea1e0b"
      }
    }
  },
  "Outputs": {
    "AvailabilityZone1": {
      "Description": "Availability Zone",
      "Value": {
        "Fn::GetAtt": [
          "Bigip1Instance",
          "AvailabilityZone"
        ]
      }
    },
    "Bigip1ExternalInterface": {
      "Description": "External interface Id on Big-IP",
      "Value": {
        "Ref": "Bigip1ExternalInterface"
      }
    },
    "Bigip1ExternalInterfacePrivateIp": {
      "Description": "Internally routable Ip of public interface on BIG-IP",
      "Value": {
        "Fn::GetAtt": [
          "Bigip1ExternalInterface",
          "PrimaryPrivateIpAddress"
        ]
      }
    },
    "Bigip1ExternalSelfEipAddress": {
      "Description": "IP Address of External interface attached to BIG-IP",
      "Value": {
        "Ref": "Bigip1ExternalSelfEipAddress"
      }
    },
    "Bigip1InstanceId": {
      "Description": "Instance Id of Big-IP in Amazon",
      "Value": {
        "Ref": "Bigip1Instance"
      }
    },
    "Bigip1InternalInterface": {
      "Description": "Internal interface ID on BIG-IP",
      "Value": {
        "Ref": "Bigip1InternalInterface"
      }
    },
    "Bigip1InternalInterfacePrivateIp": {
      "Description": "Internally routable IP of internal interface on BIG-IP",
      "Value": {
        "Fn::GetAtt": [
          "Bigip1InternalInterface",
          "PrimaryPrivateIpAddress"
        ]
      }
    },
    "Bigip1ManagementEipAddress": {
      "Description": "Ip address of management port on BIG-IP",
      "Value": {
        "Ref": "Bigip1ManagementEipAddress"
      }
    },
    "Bigip1ManagementInterface": {
      "Description": "Management interface Id on BIG-IP",
      "Value": {
        "Ref": "Bigip1ManagementInterface"
      }
    },
    "Bigip1ManagementInterfacePrivateIp": {
      "Description": "Internally routable Ip of management interface on BIG-IP",
      "Value": {
        "Fn::GetAtt": [
          "Bigip1ManagementInterface",
          "PrimaryPrivateIpAddress"
        ]
      }
    },
    "Bigip1Url": {
      "Description": "Big-IP Management GUI",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "Bigip1Instance",
                "PublicIp"
              ]
            }
          ]
        ]
      }
    }
  },
  "Parameters": {
    "Az1ExternalSubnet": {
      "ConstraintDescription": "Must be subnet ID within existing VPC",
      "Description": "Public or External subnet ID",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "Az1InternalSubnet": {
      "ConstraintDescription": "Must be subnet ID within existing VPC",
      "Description": "Private or Internal subnet ID",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "Az1ManagementSubnet": {
      "ConstraintDescription": "Must be subnet ID within existing VPC",
      "Description": "Management Subnet ID",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "BigipAdminPassword": {
      "ConstraintDescription": "Please verify your BIG-IP Admin Password",
      "Description": "Please enter your BIG-IP Admin Password",
      "MaxLength": "255",
      "MinLength": "1",
      "NoEcho": true,
      "Type": "String"
    },
    "BigipAdminUsername": {
      "ConstraintDescription": "Please verify your BIG-IP Admin Username",
      "Default": "admin",
      "Description": "Please enter your BIG-IP Admin Username",
      "MaxLength": "255",
      "MinLength": "1",
      "Type": "String"
    },
    "BigipExternalSecurityGroup": {
      "ConstraintDescription": "Must be security group ID within existing VPC",
      "Description": "Public or External Security Group ID",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "BigipInstanceType": {
      "AllowedValues": [
        "m3.xlarge",
        "m3.2xlarge",
        "c1.medium",
        "c1.xlarge",
        "cc1.4xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "must be a valid Big-IP EC2 instance type",
      "Default": "m3.xlarge",
      "Description": "F5 BIG-IP Virtual Instance Type",
      "Type": "String"
    },
    "BigipInternalSecurityGroup": {
      "ConstraintDescription": "Must be security group ID within existing VPC",
      "Description": "Private or Internal Security Group ID",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "BigipManagementSecurityGroup": {
      "ConstraintDescription": "Must be security group ID within existing VPC",
      "Description": "Bigip Management Security Group",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "BigipPerformanceType": {
      "AllowedValues": [
        "Good",
        "Better",
        "Best"
      ],
      "ConstraintDescription": "Must be a valid F5 Big-IP performance type",
      "Default": "Best",
      "Description": "F5 Bigip Performance Type",
      "Type": "String"
    },
    "BigiqAddress": {
      "ConstraintDescription": "Please verify your BIG-IQ Hostname or IP",
      "Description": "Please enter your BIG-IQ Hostname or IP",
      "MaxLength": "255",
      "MinLength": "1",
      "Type": "String"
    },
    "BigiqLicensePoolUUID": {
      "ConstraintDescription": "Please verify your BIG-IQ License Pool UUID",
      "Description": "Please enter your BIG-IQ License Pool UUID",
      "MaxLength": "255",
      "MinLength": "1",
      "Type": "String"
    },
    "BigiqPassword": {
      "ConstraintDescription": "Please verify your BIG-IQ Password",
      "Description": "Please enter your BIG-IQ Password",
      "MaxLength": "255",
      "MinLength": "1",
      "NoEcho": true,
      "Type": "String"
    },
    "BigiqUsername": {
      "ConstraintDescription": "Please verify your BIG-IQ Username.",
      "Description": "Please enter your BIG-IQ Username",
      "MaxLength": "255",
      "MinLength": "1",
      "Type": "String"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "SSHLocation": {
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
      "Default": "0.0.0.0/0",
      "Description": " The IP address range that can be used to SSH to the EC2 instances",
      "MaxLength": "18",
      "MinLength": "9",
      "Type": "String"
    },
    "Vpc": {
      "ConstraintDescription": "Must be an existing VPC within working region.",
      "Type": "AWS::EC2::VPC::Id"
    },
    "WebserverPrivateIp": {
      "ConstraintDescription": "Web Server IP used for Big-IP pool Member",
      "Description": "Web Server IP used for Big-IP pool member",
      "Type": "String"
    }
  },
  "Resources": {
    "Bigip1ExternalInterface": {
      "Properties": {
        "Description": "Public External Interface for the Bigip",
        "GroupSet": [
          {
            "Ref": "BigipExternalSecurityGroup"
          }
        ],
        "SecondaryPrivateIpAddressCount": "1",
        "SubnetId": {
          "Ref": "Az1ExternalSubnet"
        }
      },
      "Type": "AWS::EC2::NetworkInterface"
    },
    "Bigip1ExternalSelfEipAddress": {
      "Properties": {
        "Domain": "vpc"
      },
      "Type": "AWS::EC2::EIP"
    },
    "Bigip1ExternalSelfEipAssociation": {
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "Bigip1ExternalSelfEipAddress",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "Bigip1ExternalInterface"
        },
        "PrivateIpAddress": {
          "Fn::GetAtt": [
            "Bigip1ExternalInterface",
            "PrimaryPrivateIpAddress"
          ]
        }
      },
      "Type": "AWS::EC2::EIPAssociation"
    },
    "Bigip1Instance": {
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "commands": {
              "b-configure-Bigip": {
                "command": "/tmp/firstrun.sh\n"
              }
            },
            "files": {
              "/tmp/firstrun.config": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n",
                      "HOSTNAME=`curl http://169.254.169.254/latest/meta-data/hostname`\n",
                      "TZ='UTC'\n",
                      "BIGIP_ADMIN_USERNAME='",
                      {
                        "Ref": "BigipAdminUsername"
                      },
                      "'\n",
                      "BIGIP_ADMIN_PASSWORD='",
                      {
                        "Ref": "BigipAdminPassword"
                      },
                      "'\n",
                      "BIGIQ_ADDRESS='",
                      {
                        "Ref": "BigiqAddress"
                      },
                      "'\n",
                      "BIGIQ_USERNAME='",
                      {
                        "Ref": "BigiqUsername"
                      },
                      "'\n",
                      "BIGIQ_PASSWORD='",
                      {
                        "Ref": "BigiqPassword"
                      },
                      "'\n",
                      "BIGIQ_LICENSE_POOL_UUID='",
                      {
                        "Ref": "BigiqLicensePoolUUID"
                      },
                      "'\n",
                      "BIGIP_DEVICE_ADDRESS='",
                      {
                        "Ref": "Bigip1ManagementEipAddress"
                      },
                      "'\n",
                      "GATEWAY_MAC=`ifconfig eth1 | egrep HWaddr | awk '{print tolower($5)}'`\n",
                      "GATEWAY_CIDR_BLOCK=`curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`\n",
                      "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}\n",
                      "GATEWAY_PREFIX=${GATEWAY_CIDR_BLOCK#*/}\n",
                      "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`\n",
                      "VPC_CIDR_BLOCK=`curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/vpc-ipv4-cidr-block`\n",
                      "VPC_NET=${VPC_CIDR_BLOCK%/*}\n",
                      "VPC_PREFIX=${VPC_CIDR_BLOCK#*/}\n",
                      "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+2 }'`\n",
                      "MGMTIP='",
                      {
                        "Fn::GetAtt": [
                          "Bigip1ManagementInterface",
                          "PrimaryPrivateIpAddress"
                        ]
                      },
                      "'\n",
                      "EXTIP='",
                      {
                        "Fn::GetAtt": [
                          "Bigip1ExternalInterface",
                          "PrimaryPrivateIpAddress"
                        ]
                      },
                      "'\n",
                      "EXTPRIVIP='",
                      {
                        "Fn::Select": [
                          "0",
                          {
                            "Fn::GetAtt": [
                              "Bigip1ExternalInterface",
                              "SecondaryPrivateIpAddresses"
                            ]
                          }
                        ]
                      },
                      "'\n",
                      "EXTMASK='24'\n",
                      "INTIP='",
                      {
                        "Fn::GetAtt": [
                          "Bigip1InternalInterface",
                          "PrimaryPrivateIpAddress"
                        ]
                      },
                      "'\n",
                      "INTMASK='24'\n",
                      "POOLMEM='",
                      {
                        "Ref": "WebserverPrivateIp"
                      },
                      "'\n",
                      "POOLMEMPORT=80\n",
                      "APPNAME='demo-app-1'\n",
                      "VIRTUALSERVERPORT=80\n",
                      "CRT='default.crt'\n",
                      "KEY='default.key'\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000755",
                "owner": "root"
              },
              "/tmp/firstrun.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n",
                      ". /tmp/firstrun.config\n",
                      ". /tmp/firstrun_utils.sh\n",
                      "FILE=/tmp/firstrun.log\n",
                      "if [ ! -e $FILE ]\n",
                      " then\n",
                      "     touch $FILE\n",
                      "     nohup $0 0<&- &>/dev/null &\n",
                      "     exit\n",
                      "fi\n",
                      "exec 1<&-\n",
                      "exec 2<&-\n",
                      "exec 1<>$FILE\n",
                      "exec 2>&1\n",
                      "date\n",
                      "checkF5Ready\n",
                      "echo 'starting tmsh config'\n",
                      "tmsh modify sys ntp timezone ${TZ}\n",
                      "tmsh modify sys ntp servers add { 0.pool.ntp.org 1.pool.ntp.org }\n",
                      "tmsh modify sys dns name-servers add { ${NAME_SERVER} }\n",
                      "tmsh modify sys global-settings gui-setup disabled\n",
                      "tmsh modify sys global-settings hostname ${HOSTNAME}\n",
                      "tmsh modify auth password root <<< $'${BIGIP_ADMIN_PASSWORD}\n${BIGIP_ADMIN_PASSWORD}\n'\n",
                      "tmsh modify auth user admin password \"'${BIGIP_ADMIN_PASSWORD}'\"\n",
                      "tmsh save /sys config\n",
                      "tmsh create net vlan external interfaces add { 1.1 } \n",
                      "tmsh create net self ${EXTIP}/${EXTMASK} vlan external allow-service add { tcp:4353 }\n",
                      "tmsh create net vlan internal interfaces add { 1.2 } \n",
                      "tmsh create net self ${INTIP}/${INTMASK} vlan internal allow-service default\n",
                      "tmsh create net route default gw ${GATEWAY}\n",
                      "tmsh mv cm device bigip1 ${HOSTNAME}\n",
                      "tmsh modify cm device ${HOSTNAME} configsync-ip ${EXTIP} unicast-address { { effective-ip ${EXTIP} effective-port 1026 ip ${EXTIP} } }\n",
                      "tmsh save /sys config\n",
                      "echo 'start install biqiq license'\n",
                      ". /tmp/license_from_bigiq.sh\n",
                      "checkStatusnoret\n",
                      "sleep 20 \n",
                      "tmsh save /sys config\n",
                      "tmsh create ltm pool ${APPNAME}-pool members add { ${POOLMEM}:${POOLMEMPORT} } monitor http\n",
                      "tmsh create ltm virtual /Common/${APPNAME}-${VIRTUALSERVERPORT} { destination ${EXTPRIVIP}:${VIRTUALSERVERPORT} mask 255.255.255.255 ip-protocol tcp pool /Common/${APPNAME}-pool source 0.0.0.0/0 source-address-translation { type automap } translate-address enabled translate-port enabled }\n",
                      "tmsh save /sys config\n",
                      "date\n",
                      "# remove_license_from_bigiq.sh uses firstrun.config but for security purposes, typically want to remove firstrun.config\n",
                      "# rm /tmp/firstrun.config\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000755",
                "owner": "root"
              },
              "/tmp/firstrun_utils.sh": {
                "group": "root",
                "mode": "000755",
                "owner": "root",
                "source": "http://cdn.f5.com/product/templates/utils/firstrun_utils.sh"
              },
              "/tmp/license_from_bigiq.sh": {
                "group": "root",
                "mode": "000755",
                "owner": "root",
                "source": "http://cdn.f5.com/product/templates/utils/license_from_bigiq.sh"
              },
              "/tmp/remove_license_from_bigiq.sh": {
                "group": "root",
                "mode": "000755",
                "owner": "root",
                "source": "http://cdn.f5.com/product/templates/utils/remove_license_from_bigiq.sh"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "BigipRegionMap",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "BigipPerformanceType"
            }
          ]
        },
        "InstanceType": {
          "Ref": "BigipInstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "NetworkInterfaces": [
          {
            "Description": "Management Interface",
            "DeviceIndex": "0",
            "NetworkInterfaceId": {
              "Ref": "Bigip1ManagementInterface"
            }
          },
          {
            "Description": "Public or External Interface",
            "DeviceIndex": "1",
            "NetworkInterfaceId": {
              "Ref": "Bigip1ExternalInterface"
            }
          },
          {
            "Description": "Private or Internal Interface",
            "DeviceIndex": "2",
            "NetworkInterfaceId": {
              "Ref": "Bigip1InternalInterface"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "Big-IP: ",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r ",
                "Bigip1Instance",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::EC2::Instance"
    },
    "Bigip1InternalInterface": {
      "Properties": {
        "Description": "Internal Interface for the Bigip",
        "GroupSet": [
          {
            "Ref": "BigipInternalSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "Az1InternalSubnet"
        }
      },
      "Type": "AWS::EC2::NetworkInterface"
    },
    "Bigip1ManagementEipAddress": {
      "Properties": {
        "Domain": "vpc"
      },
      "Type": "AWS::EC2::EIP"
    },
    "Bigip1ManagementEipAssociation": {
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "Bigip1ManagementEipAddress",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "Bigip1ManagementInterface"
        }
      },
      "Type": "AWS::EC2::EIPAssociation"
    },
    "Bigip1ManagementInterface": {
      "Properties": {
        "Description": "Management Interface for the Bigip",
        "GroupSet": [
          {
            "Ref": "BigipManagementSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "Az1ManagementSubnet"
        }
      },
      "Type": "AWS::EC2::NetworkInterface"
    },
    "Bigip1VipEipAddress": {
      "Properties": {
        "Domain": "vpc"
      },
      "Type": "AWS::EC2::EIP"
    },
    "Bigip1VipEipAssociation": {
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "Bigip1VipEipAddress",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "Bigip1ExternalInterface"
        },
        "PrivateIpAddress": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAtt": [
                "Bigip1ExternalInterface",
                "SecondaryPrivateIpAddresses"
              ]
            }
          ]
        }
      },
      "Type": "AWS::EC2::EIPAssociation"
    }
  }
}
