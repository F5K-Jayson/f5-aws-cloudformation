{
 "AWSTemplateFormatVersion": "2010-09-09",
 "Description": "AWS CloudFormation Template for creating a full stack with a 1nic BIG-IP, a 1 Availability Zone VPC, subnets, security groups and a webeserver (Bitnami LAMP stack with username bitnami **WARNING** This template creates Amazon EC2 Instances. You will be billed for the AWS resources used if you create a stack from this template.",
 "Mappings": {
  "BigipRegionMap": {
   "ap-northeast-1": {
    "Best": "ami-9f1704f1",
    "Better": "ami-06687b68",
    "Good": "ami-6410030a"
   },
   "ap-southeast-1": {
    "Best": "ami-93f82df0",
    "Better": "ami-1ff82d7c",
    "Good": "ami-89fe2bea"
   },
   "ap-southeast-2": {
    "Best": "ami-bc486adf",
    "Better": "ami-8a4466e9",
    "Good": "ami-be486add"
   },
   "eu-west-1": {
    "Best": "ami-28c84b5b",
    "Better": "ami-87c94af4",
    "Good": "ami-17ca4964"
   },
   "sa-east-1": {
    "Best": "ami-8f20afe3",
    "Better": "ami-8e20afe2",
    "Good": "ami-8b2aa5e7"
   },
   "us-east-1": {
    "Best": "ami-b89284d2",
    "Better": "ami-a39583c9",
    "Good": "ami-809284ea"
   },
   "us-west-1": {
    "Best": "ami-25b5c945",
    "Better": "ami-99b3cff9",
    "Good": "ami-98b3cff8"
   },
   "us-west-2": {
    "Best": "ami-5fe81c3f",
    "Better": "ami-a2ec18c2",
    "Good": "ami-6bea1e0b"
   }
  },
  "WebserverRegionMap": {
   "ap-northeast-1": {
    "AMI": "ami-489b8049"
   },
   "ap-southeast-1": {
    "AMI": "ami-0ad2f858"
   },
   "ap-southeast-2": {
    "AMI": "ami-25d7a31f"
   },
   "eu-west-1": {
    "AMI": "ami-7dfc720a"
   },
   "sa-east-1": {
    "AMI": "ami-6def5070"
   },
   "us-east-1": {
    "AMI": "ami-00266568"
   },
   "us-west-1": {
    "AMI": "ami-fc8b93b9"
   },
   "us-west-2": {
    "AMI": "ami-71520941"
   }
  }
 },
 "Outputs": {
  "AvailabilityZone1": {
   "Description": "Availability Zone",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1Instance",
     "AvailabilityZone"
    ]
   }
  },
  "Az1ApplicationSubnet": {
   "Description": "Az1Application Subnet Id",
   "Value": {
    "Ref": "Az1ApplicationSubnet"
   }
  },
  "Az1ExternalSubnet": {
   "Description": "Az1External Subnet Id",
   "Value": {
    "Ref": "Az1ExternalSubnet"
   }
  },
  "Bigip1ExternalInterface": {
   "Description": "External interface Id on Big-IP",
   "Value": {
    "Ref": "Bigip1ExternalInterface"
   }
  },
  "Bigip1ExternalInterfacePrivateIp": {
   "Description": "Internally routable Ip of public interface on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1ExternalInterface",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip1ExternalSelfEipAddress": {
   "Description": "IP Address of External interface attached to BIG-IP",
   "Value": {
    "Ref": "Bigip1ExternalSelfEipAddress"
   }
  },
  "Bigip1InstanceId": {
   "Description": "Instance Id of Big-IP in Amazon",
   "Value": {
    "Ref": "Bigip1Instance"
   }
  },
  "Bigip1Url": {
   "Description": "Big-IP Management GUI",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Fn::GetAtt": [
        "Bigip1Instance",
        "PublicIp"
       ]
      },
      ":",
      {
       "Ref": "BigipManagementGuiPort"
      }
     ]
    ]
   }
  },
  "BigipExternalSecurityGroup": {
   "Description": "Public or External Security Group",
   "Value": {
    "Ref": "BigipExternalSecurityGroup"
   }
  },
  "DnsServers": {
   "Description": "DNS server for VPC",
   "Value": "10.0.0.2"
  },
  "Vpc": {
   "Description": "VPC ID",
   "Value": {
    "Ref": "Vpc"
   }
  },
  "WebserverPrivateIp": {
   "Description": "Private Ip for Webserver",
   "Value": {
    "Fn::GetAtt": [
     "Webserver",
     "PrivateIp"
    ]
   }
  },
  "WebserverPublicIp": {
   "Description": "Public Ip for Webserver",
   "Value": {
    "Fn::GetAtt": [
     "Webserver",
     "PublicIp"
    ]
   }
  },
  "WebserverPublicUrl": {
   "Description": "Public Url for Webserver",
   "Value": {
    "Fn::Join": [
     "",
     [
      "http://",
      {
       "Fn::GetAtt": [
        "Webserver",
        "PublicIp"
       ]
      }
     ]
    ]
   }
  }
 },
 "Parameters": {
  "AvailabilityZone1": {
   "Description": "Name of an Availability Zone in this Region",
   "Type": "AWS::EC2::AvailabilityZone::Name"
  },
  "BigipAdminPassword": {
   "ConstraintDescription": "Please verify your BIG-IP Admin Password",
   "Description": "Please enter your BIG-IP Admin Password",
   "MaxLength": "255",
   "MinLength": "1",
   "NoEcho": true,
   "Type": "String"
  },
  "BigipAdminUsername": {
   "ConstraintDescription": "Please verify your BIG-IP Admin Username",
   "Default": "admin",
   "Description": "Please enter your BIG-IP Admin Username",
   "MaxLength": "255",
   "MinLength": "1",
   "Type": "String"
  },
  "BigipInstanceType": {
   "AllowedValues": [
    "m3.xlarge",
    "m3.2xlarge",
    "c1.medium",
    "c1.xlarge",
    "cc1.4xlarge",
    "cc2.8xlarge",
    "cg1.4xlarge"
   ],
   "ConstraintDescription": "must be a valid Big-IP EC2 instance type",
   "Default": "m3.xlarge",
   "Description": "F5 BIG-IP Virtual Instance Type",
   "Type": "String"
  },
  "BigipManagementGuiPort": {
   "ConstraintDescription": "Must be a valid, unusued port on BIG-IP.",
   "Default": "443",
   "Description": "Port to use for the managment GUI",
   "Type": "Number"
  },
  "BigipPerformanceType": {
   "AllowedValues": [
    "Good",
    "Better",
    "Best"
   ],
   "ConstraintDescription": "Must be a valid F5 Big-IP performance type",
   "Default": "Best",
   "Description": "F5 Bigip Performance Type",
   "Type": "String"
  },
  "BigiqAddress": {
   "ConstraintDescription": "Please verify your BIG-IQ Hostname or IP",
   "Description": "Please enter your BIG-IQ Hostname or IP",
   "MaxLength": "255",
   "MinLength": "1",
   "Type": "String"
  },
  "BigiqLicensePoolUUID": {
   "ConstraintDescription": "Please verify your BIG-IQ License Pool UUID",
   "Description": "Please enter your BIG-IQ License Pool UUID",
   "MaxLength": "255",
   "MinLength": "1",
   "Type": "String"
  },
  "BigiqPassword": {
   "ConstraintDescription": "Please verify your BIG-IQ Password",
   "Description": "Please enter your BIG-IQ Password",
   "MaxLength": "255",
   "MinLength": "1",
   "NoEcho": true,
   "Type": "String"
  },
  "BigiqUsername": {
   "ConstraintDescription": "Please verify your BIG-IQ Username.",
   "Description": "Please enter your BIG-IQ Username",
   "MaxLength": "255",
   "MinLength": "1",
   "Type": "String"
  },
  "KeyName": {
   "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
   "Type": "AWS::EC2::KeyPair::KeyName"
  },
  "SSHLocation": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
   "Default": "0.0.0.0/0",
   "Description": " The IP address range that can be used to SSH to the EC2 instances",
   "MaxLength": "18",
   "MinLength": "9",
   "Type": "String"
  },
  "WebserverInstanceType": {
   "AllowedValues": [
    "t1.micro",
    "m3.medium",
    "m3.xlarge",
    "m2.xlarge",
    "m3.2xlarge",
    "c3.large",
    "c3.xlarge"
   ],
   "ConstraintDescription": "must be a valid EC2 instance type",
   "Default": "t1.micro",
   "Description": "Webserver EC2 instance type",
   "Type": "String"
  }
 },
 "Resources": {
  "ApplicationDefaultRoute": {
   "DependsOn": "AttachGateway",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "InternetGateway"
    },
    "RouteTableId": {
     "Ref": "ApplicationRouteTable"
    }
   },
   "Type": "AWS::EC2::Route"
  },
  "ApplicationRouteTable": {
   "Properties": {
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "Key": "Name",
      "Value": "Application Route Table"
     },
     {
      "Key": "Network",
      "Value": "Application"
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::RouteTable"
  },
  "AttachGateway": {
   "Properties": {
    "InternetGatewayId": {
     "Ref": "InternetGateway"
    },
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::VPCGatewayAttachment"
  },
  "Az1ApplicationSubnet": {
   "Properties": {
    "AvailabilityZone": {
     "Ref": "AvailabilityZone1"
    },
    "CidrBlock": "10.0.3.0/24",
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "AWS::StackId"
      }
     },
     {
      "Key": "Name",
      "Value": "Az1 Application Subnet"
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::Subnet"
  },
  "Az1ApplicationSubnetRouteTableAssociation": {
   "Properties": {
    "RouteTableId": {
     "Ref": "ApplicationRouteTable"
    },
    "SubnetId": {
     "Ref": "Az1ApplicationSubnet"
    }
   },
   "Type": "AWS::EC2::SubnetRouteTableAssociation"
  },
  "Az1ExternalSubnet": {
   "Properties": {
    "AvailabilityZone": {
     "Ref": "AvailabilityZone1"
    },
    "CidrBlock": "10.0.1.0/24",
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "AWS::StackId"
      }
     },
     {
      "Key": "Name",
      "Value": "Az1 External Subnet"
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::Subnet"
  },
  "Az1ExternalSubnetRouteTableAssociation": {
   "Properties": {
    "RouteTableId": {
     "Ref": "ExternalRouteTable"
    },
    "SubnetId": {
     "Ref": "Az1ExternalSubnet"
    }
   },
   "Type": "AWS::EC2::SubnetRouteTableAssociation"
  },
  "Bigip1ExternalInterface": {
   "Properties": {
    "Description": "Public External Interface for the Bigip",
    "GroupSet": [
     {
      "Ref": "BigipExternalSecurityGroup"
     }
    ],
    "SecondaryPrivateIpAddressCount": "1",
    "SubnetId": {
     "Ref": "Az1ExternalSubnet"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1ExternalSelfEipAddress": {
   "DependsOn": "AttachGateway",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1ExternalSelfEipAssociation": {
   "DependsOn": "AttachGateway",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1ExternalSelfEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip1ExternalInterface"
    },
    "PrivateIpAddress": {
     "Fn::GetAtt": [
      "Bigip1ExternalInterface",
      "PrimaryPrivateIpAddress"
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip1Instance": {
   "Metadata": {
    "AWS::CloudFormation::Init": {
     "config": {
      "commands": {
       "b-configure-Bigip": {
        "command": "/tmp/firstrun.sh\n"
       }
      },
      "files": {
       "/tmp/firstrun.config": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "HOSTNAME=`curl http://169.254.169.254/latest/meta-data/hostname`\n",
           "TZ='UTC'\n",
           "BIGIP_ADMIN_USERNAME='",
           {
            "Ref": "BigipAdminUsername"
           },
           "'\n",
           "BIGIP_ADMIN_PASSWORD='",
           {
            "Ref": "BigipAdminPassword"
           },
           "'\n",
           "BIGIQ_ADDRESS='",
           {
            "Ref": "BigiqAddress"
           },
           "'\n",
           "BIGIQ_USERNAME='",
           {
            "Ref": "BigiqUsername"
           },
           "'\n",
           "BIGIQ_PASSWORD='",
           {
            "Ref": "BigiqPassword"
           },
           "'\n",
           "BIGIQ_LICENSE_POOL_UUID='",
           {
            "Ref": "BigiqLicensePoolUUID"
           },
           "'\n",
           "BIGIP_DEVICE_ADDRESS='",
           {
            "Ref": "Bigip1ExternalSelfEipAddress"
           },
           "'\n",
           "MANAGEMENT_GUI_PORT='",
           {
            "Ref": "BigipManagementGuiPort"
           },
           "'\n",
           "GATEWAY_MAC=`ifconfig eth0 | egrep HWaddr | awk '{print tolower($5)}'`\n",
           "GATEWAY_CIDR_BLOCK=`curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`\n",
           "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}\n",
           "GATEWAY_PREFIX=${GATEWAY_CIDR_BLOCK#*/}\n",
           "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`\n",
           "VPC_CIDR_BLOCK=`curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/vpc-ipv4-cidr-block`\n",
           "VPC_NET=${VPC_CIDR_BLOCK%/*}\n",
           "VPC_PREFIX=${VPC_CIDR_BLOCK#*/}\n",
           "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+2 }'`\n",
           "POOLMEM='",
           {
            "Fn::GetAtt": [
             "Webserver",
             "PrivateIp"
            ]
           },
           "'\n",
           "POOLMEMPORT=80\n",
           "APPNAME='demo-app-1'\n",
           "VIRTUALSERVERPORT=80\n",
           "CRT='default.crt'\n",
           "KEY='default.key'\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000777",
        "owner": "root"
       },
       "/tmp/firstrun.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           ". /tmp/firstrun.config\n",
           "FILE=/tmp/firstrun.log\n",
           "if [ ! -e $FILE ]; then\n",
           "   touch $FILE\n",
           "   nohup $0 0<&- &>/dev/null &\n",
           "   exit\n",
           "fi\n",
           "function checkStatus() {\n",
           "   count=1\n",
           "   sleep 10\n",
           "   STATUS=`cat /var/prompt/ps1`\n",
           "   while [[ (${STATUS}x != 'Active'x) && (${STATUS}x != 'Standby'x) ]]; do\n",
           "      echo -n '.'\n",
           "      sleep 5\n",
           "      count=$(($count+1))\n",
           "      STATUS=`cat /var/prompt/ps1`\n",
           "      if [[ $count -eq 60 ]]; then\n",
           "         checkretstatus=\"restart\"\n",
           "         return\n",
           "      fi\n",
           "    done\n",
           "    checkretstatus=\"run\"\n",
           "}\n",
           "function checkF5Ready {\n",
           "   sleep 5\n",
           "   while [[ ! -e '/var/prompt/ps1' ]]; do\n",
           "      echo -n '.'\n",
           "      sleep 5\n",
           "   done \n",
           "   sleep 5\n",
           "   STATUS=`cat /var/prompt/ps1`\n",
           "   while [[ ${STATUS}x != 'NO LICENSE'x ]]; do\n",
           "      echo -n '.'\n",
           "      sleep 5\n",
           "      STATUS=`cat /var/prompt/ps1`\n",
           "   done\n",
           "   echo -n ' '\n",
           "   while [[ ! -e '/var/prompt/cmiSyncStatus' ]]; do\n",
           "      echo -n '.'\n",
           "      sleep 5\n",
           "   done \n",
           "   STATUS=`cat /var/prompt/cmiSyncStatus`\n",
           "   while [[ ${STATUS}x != 'Standalone'x ]]; do\n",
           "      echo -n '.'\n",
           "      sleep 5\n",
           "      STATUS=`cat /var/prompt/cmiSyncStatus`\n",
           "   done\n",
           "}\n",
           "function checkStatusnoret {\n",
           "   sleep 10\n",
           "   STATUS=`cat /var/prompt/ps1`\n",
           "   while [[ (${STATUS}x != 'Active'x) && (${STATUS}x != 'Standby'x) ]]; do\n",
           "      echo -n '.'\n",
           "      sleep 5\n",
           "      STATUS=`cat /var/prompt/ps1`\n",
           "   done\n",
           "}\n",
           "exec 1<&-\n",
           "exec 2<&-\n",
           "exec 1<>$FILE\n",
           "exec 2>&1\n",
           "checkF5Ready\n",
           "sleep 150\n",
           "echo 'starting tmsh config'\n",
           "tmsh modify sys ntp timezone ${TZ}\n",
           "tmsh modify sys ntp servers add { 0.pool.ntp.org 1.pool.ntp.org }\n",
           "tmsh modify sys dns name-servers add { ${NAME_SERVER} }\n",
           "tmsh modify sys global-settings gui-setup disabled\n",
           "tmsh modify sys global-settings hostname ${HOSTNAME}\n",
           "tmsh modify auth password root <<< $'${BIGIP_ADMIN_PASSWORD}\n${BIGIP_ADMIN_PASSWORD}\n'\n",
           "tmsh modify auth user admin password \"'${BIGIP_ADMIN_PASSWORD}'\"\n",
           "tmsh save /sys config\n",
           "tmsh modify sys httpd ssl-port ${MANAGEMENT_GUI_PORT}\n",
           "tmsh modify net self-allow defaults add { tcp:${MANAGEMENT_GUI_PORT} tcp:6123 tcp:6124 tcp:6125 tcp:6126 tcp:6127 tcp:6128 }\n",
           "tmsh mv cm device bigip1 ${HOSTNAME}\n",
           "tmsh modify cm device ${HOSTNAME} configsync-ip ${EXTIP} unicast-address { { effective-ip ${EXTIP} effective-port 1026 ip ${EXTIP} } }\n",
           "tmsh save /sys config\n",
           "### BEGIN BIGIQ LICENSE ###\n",
           "echo 'start install license'\n",
           "declare -i i\n",
           "i=0\n",
           "while [ -z \"${CONTENT_SUCCESS}\" ]; do \n",
           "    curl -sSk -o /tmp/license_from_bigiq.sh --max-time 15 https://cdn.f5.com/product/templates/utils/license_from_bigiq.sh\n",
           "    CONTENT_SUCCESS=$( egrep 'bin/bash' /tmp/license_from_bigiq.sh )\n",
           "    if [ $i == 30 ]; then\n",
           "        logger -p local0.err \"first_run.sh EXITING. failed to download bigiq license file.\"\n",
           "        exit 1\n",
           "    fi\n",
           "    i=$i+1\n",
           "    sleep 10\n",
           "done\n",
           "curl -sSk -o /tmp/remove_license_from_bigiq.sh --max-time 15 https://cdn.f5.com/product/templates/utils/remove_license_from_bigiq.sh\n",
           ". /tmp/license_from_bigiq.sh\n",
           "tmsh save /sys config\n",
           "checkStatusnoret\n",
           "echo 'sleeping additional 30 secs to wait for network to be reachable'\n",
           "sleep 30\n",
           "echo 'provisioning asm'\n",
           "tmsh modify /sys provision asm level nominal\n",
           "checkretstatus='stop'\n",
           "while [[ $checkretstatus != \"run\" ]]; do\n",
           "     checkStatus\n",
           "     if [[ $checkretstatus == \"restart\" ]]; then\n",
           "         echo restarting\n",
           "         tmsh modify /sys provision asm level none\n",
           "         checkStatusnoret\n",
           "         checkretstatus='stop'\n",
           "         tmsh modify /sys provision asm level nominal\n",
           "     fi\n",
           "done\n",
           "echo 'done provisioning asm'\n",
           "tmsh modify sys db dhclient.mgmt { value disable }\n",
           "tmsh save /sys config\n",
           "tmsh create ltm pool ${APPNAME}-pool members add { ${POOLMEM}:${POOLMEMPORT} } monitor http\n",
           "curl https://cdn.f5.com/product/blackbox/asm-policy-linux-high.xml > /home/admin/asm-policy-linux-high.xml\n",
           "tmsh load asm policy file /home/admin/asm-policy-linux-high.xml\n",
           "tmsh modify asm policy /Common/linux-high active\n",
           "tmsh create ltm policy app-ltm-policy strategy first-match\n",
           "tmsh modify ltm policy app-ltm-policy controls add { asm }\n",
           "tmsh modify ltm policy app-ltm-policy rules add { associate-asm-policy { actions replace-all-with { 0 { asm request enable policy /Common/linux-high } } } }\n",
           "tmsh create ltm virtual /Common/${APPNAME}-${VIRTUALSERVERPORT} { destination 0.0.0.0:${VIRTUALSERVERPORT} mask any ip-protocol tcp policies replace-all-with { app-ltm-policy { } } pool /Common/${APPNAME}-pool profiles replace-all-with { http { } tcp { } websecurity { } } security-log-profiles replace-all-with { \"Log illegal requests\" } source 0.0.0.0/0 source-address-translation { type automap } translate-address enabled translate-port enabled}\n",
           "tmsh save /sys config\n",
           "# remove_license_from_bigiq.sh uses firstrun.config but for security purposes, typically want to remove firstrun.config\n",
           "# rm /tmp/firstrun.config\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000777",
        "owner": "root"
       }
      }
     }
    }
   },
   "Properties": {
    "ImageId": {
     "Fn::FindInMap": [
      "BigipRegionMap",
      {
       "Ref": "AWS::Region"
      },
      {
       "Ref": "BigipPerformanceType"
      }
     ]
    },
    "InstanceType": {
     "Ref": "BigipInstanceType"
    },
    "KeyName": {
     "Ref": "KeyName"
    },
    "NetworkInterfaces": [
     {
      "Description": "Public or External Interface",
      "DeviceIndex": "0",
      "NetworkInterfaceId": {
       "Ref": "Bigip1ExternalInterface"
      }
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Big-IP: ",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash\n",
        "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v -s ",
        {
         "Ref": "AWS::StackId"
        },
        " -r ",
        "Bigip1Instance",
        " --region ",
        {
         "Ref": "AWS::Region"
        },
        "\n"
       ]
      ]
     }
    }
   },
   "Type": "AWS::EC2::Instance"
  },
  "BigipExternalSecurityGroup": {
   "Properties": {
    "GroupDescription": "Public or External interface rules",
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Ref": "SSHLocation"
      },
      "FromPort": "22",
      "IpProtocol": "tcp",
      "ToPort": "22"
     },
     {
      "CidrIp": {
       "Ref": "SSHLocation"
      },
      "FromPort": {
       "Ref": "BigipManagementGuiPort"
      },
      "IpProtocol": "tcp",
      "ToPort": {
       "Ref": "BigipManagementGuiPort"
      }
     },
     {
      "CidrIp": {
       "Ref": "SSHLocation"
      },
      "FromPort": "-1",
      "IpProtocol": "icmp",
      "ToPort": "-1"
     },
     {
      "CidrIp": "0.0.0.0/0",
      "FromPort": "80",
      "IpProtocol": "tcp",
      "ToPort": "80"
     },
     {
      "CidrIp": "0.0.0.0/0",
      "FromPort": "443",
      "IpProtocol": "tcp",
      "ToPort": "443"
     },
     {
      "CidrIp": "0.0.0.0/0",
      "FromPort": "4353",
      "IpProtocol": "tcp",
      "ToPort": "4353"
     },
     {
      "CidrIp": "10.0.0.0/16",
      "FromPort": "22",
      "IpProtocol": "tcp",
      "ToPort": "22"
     },
     {
      "CidrIp": "10.0.0.0/16",
      "FromPort": "1026",
      "IpProtocol": "udp",
      "ToPort": "1026"
     },
     {
      "CidrIp": "10.0.0.0/16",
      "FromPort": "6123",
      "IpProtocol": "tcp",
      "ToPort": "6128"
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Bigip Security Group: ",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "ExternalDefaultRoute": {
   "DependsOn": "AttachGateway",
   "Properties": {
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "InternetGateway"
    },
    "RouteTableId": {
     "Ref": "ExternalRouteTable"
    }
   },
   "Type": "AWS::EC2::Route"
  },
  "ExternalRouteTable": {
   "Properties": {
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "Key": "Name",
      "Value": "External Route Table"
     },
     {
      "Key": "Network",
      "Value": "External"
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::RouteTable"
  },
  "InternetGateway": {
   "Properties": {
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "AWS::StackId"
      }
     }
    ]
   },
   "Type": "AWS::EC2::InternetGateway"
  },
  "Vpc": {
   "Properties": {
    "CidrBlock": "10.0.0.0/16",
    "EnableDnsHostnames": "true",
    "EnableDnsSupport": "true",
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "AWS::StackId"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Ref": "AWS::StackId"
      }
     }
    ]
   },
   "Type": "AWS::EC2::VPC"
  },
  "Webserver": {
   "Properties": {
    "ImageId": {
     "Fn::FindInMap": [
      "WebserverRegionMap",
      {
       "Ref": "AWS::Region"
      },
      "AMI"
     ]
    },
    "InstanceType": {
     "Ref": "WebserverInstanceType"
    },
    "KeyName": {
     "Ref": "KeyName"
    },
    "NetworkInterfaces": [
     {
      "AssociatePublicIpAddress": "true",
      "Description": {
       "Fn::Join": [
        "",
        [
         {
          "Ref": "AWS::StackName"
         },
         " Webserver Network Interface"
        ]
       ]
      },
      "DeviceIndex": "0",
      "GroupSet": [
       {
        "Ref": "WebserverSecurityGroup"
       }
      ],
      "SubnetId": {
       "Ref": "Az1ApplicationSubnet"
      }
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "Key": "Name",
      "Value": "Webserver"
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash -x\n",
        "echo \"Hello World\"\n"
       ]
      ]
     }
    }
   },
   "Type": "AWS::EC2::Instance"
  },
  "WebserverSecurityGroup": {
   "Properties": {
    "GroupDescription": "Enable Access to Webserver",
    "SecurityGroupIngress": [
     {
      "CidrIp": "0.0.0.0/0",
      "FromPort": "22",
      "IpProtocol": "tcp",
      "ToPort": "22"
     },
     {
      "CidrIp": "0.0.0.0/0",
      "FromPort": "80",
      "IpProtocol": "tcp",
      "ToPort": "80"
     },
     {
      "CidrIp": "0.0.0.0/0",
      "FromPort": "443",
      "IpProtocol": "tcp",
      "ToPort": "443"
     },
     {
      "CidrIp": "0.0.0.0/0",
      "FromPort": "-1",
      "IpProtocol": "icmp",
      "ToPort": "-1"
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "Key": "Name",
      "Value": "Webserver Security Group"
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  }
 }
}
