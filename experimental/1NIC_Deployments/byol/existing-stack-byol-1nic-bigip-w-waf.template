{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template for creating a 1nic Big-IP in an existing VPC **WARNING** This template creates Amazon EC2 Instances. You will be billed for the AWS resources used if you create a stack from this template.",
  "Mappings": {
    "BigipRegionMap": {
      "ap-northeast-1": {
        "Best": "ami-e801d089",
        "Better": "ami-2903d248",
        "Good": "ami-1402d375"
      },
      "ap-southeast-1": {
        "Best": "ami-f3439990",
        "Better": "ami-50419b33",
        "Good": "ami-f6439995"
      },
      "ap-southeast-2": {
        "Best": "ami-b58bbad6",
        "Better": "ami-d289b8b1",
        "Good": "ami-6489b807"
      },
      "eu-central-1": {
        "Best": "ami-1eb14c71",
        "Better": "ami-29b64b46",
        "Good": "ami-69b04d06"
      },
      "eu-west-1": {
        "Best": "ami-32c5bc41",
        "Better": "ami-f2394181",
        "Good": "ami-c2c7beb1"
      },
      "sa-east-1": {
        "Best": "ami-69c15205",
        "Better": "ami-73c2511f",
        "Good": "ami-94dd4ef8"
      },
      "us-east-1": {
        "Best": "ami-83cab794",
        "Better": "ami-3fc4b928",
        "Good": "ami-e2c9b4f5"
      },
      "us-west-1": {
        "Best": "ami-257c3345",
        "Better": "ami-3f7c335f",
        "Good": "ami-7d7c331d"
      },
      "us-west-2": {
        "Best": "ami-8b76a4eb",
        "Better": "ami-a977a5c9",
        "Good": "ami-2370a243"
      }
    }
  },
  "Outputs": {
    "AvailabilityZone1": {
      "Description": "Availability Zone",
      "Value": {
        "Fn::GetAtt": [
          "Bigip1Instance",
          "AvailabilityZone"
        ]
      }
    },
    "Bigip1ExternalInterface": {
      "Description": "External interface Id on Big-IP",
      "Value": {
        "Ref": "Bigip1ExternalInterface"
      }
    },
    "Bigip1ExternalInterfacePrivateIp": {
      "Description": "Internally routable Ip of public interface on BIG-IP",
      "Value": {
        "Fn::GetAtt": [
          "Bigip1ExternalInterface",
          "PrimaryPrivateIpAddress"
        ]
      }
    },
    "Bigip1ExternalSelfEipAddress": {
      "Description": "IP Address of External interface attached to BIG-IP",
      "Value": {
        "Ref": "Bigip1ExternalSelfEipAddress"
      }
    },
    "Bigip1InstanceId": {
      "Description": "Instance Id of Big-IP in Amazon",
      "Value": {
        "Ref": "Bigip1Instance"
      }
    },
    "Bigip1Url": {
      "Description": "Big-IP Management GUI",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Fn::GetAtt": [
                "Bigip1Instance",
                "PublicIp"
              ]
            },
            ":",
            {
              "Ref": "BigipManagementGuiPort"
            }
          ]
        ]
      }
    },
    "Bigip1VipEipAddress": {
      "Description": "EIP address for VIP",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "Bigip1Instance",
                "PublicIp"
              ]
            },
            ":80"
          ]
        ]
      }
    }
  },
  "Parameters": {
    "Az1ExternalSubnet": {
      "ConstraintDescription": "Must be subnet ID within existing VPC",
      "Description": "Public or External subnet ID",
      "Type": "AWS::EC2::Subnet::Id"
    },
    "Bigip1LicenseKey": {
      "AllowedPattern": "([\\x41-\\x5A][\\x41-\\x5A|\\x30-\\x39]{4})\\-([\\x41-\\x5A|\\x30-\\x39]{5})\\-([\\x41-\\x5A|\\x30-\\x39]{5})\\-([\\x41-\\x5A|\\x30-\\x39]{5})\\-([\\x41-\\x5A|\\x30-\\x39]{7})",
      "ConstraintDescription": "Please verify your F5 BYOL regkey.",
      "Description": "Please enter your F5 BYOL regkey here:",
      "MaxLength": "255",
      "MinLength": "1",
      "Type": "String"
    },
    "BigipAdminPassword": {
      "ConstraintDescription": "Please verify your BIG-IP Admin Password",
      "Description": "Please enter your BIG-IP Admin Password",
      "MaxLength": "255",
      "MinLength": "1",
      "NoEcho": true,
      "Type": "String"
    },
    "BigipAdminUsername": {
      "ConstraintDescription": "Please verify your BIG-IP Admin Username",
      "Default": "admin",
      "Description": "Please enter your BIG-IP Admin Username",
      "MaxLength": "255",
      "MinLength": "1",
      "Type": "String"
    },
    "BigipExternalSecurityGroup": {
      "ConstraintDescription": "Must be security group ID within existing VPC",
      "Description": "Public or External Security Group ID",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "BigipInstanceType": {
      "AllowedValues": [
        "t2.medium",
        "t2.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge"
      ],
      "ConstraintDescription": "must be a valid Big-IP EC2 instance type",
      "Default": "m3.2xlarge",
      "Description": "F5 BIG-IP Virtual Instance Type",
      "Type": "String"
    },
    "BigipManagementGuiPort": {
      "ConstraintDescription": "Must be a valid, unusued port on BIG-IP.",
      "Default": "443",
      "Description": "Port to use for the managment GUI",
      "Type": "Number"
    },
    "BigipPerformanceType": {
      "AllowedValues": [
        "Good",
        "Better",
        "Best"
      ],
      "ConstraintDescription": "Must be a valid F5 Big-IP performance type",
      "Default": "Best",
      "Description": "F5 Bigip Performance Type",
      "Type": "String"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "SSHLocation": {
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
      "Default": "0.0.0.0/0",
      "Description": " The IP address range that can be used to SSH to the EC2 instances",
      "MaxLength": "18",
      "MinLength": "9",
      "Type": "String"
    },
    "Vpc": {
      "ConstraintDescription": "Must be an existing VPC within working region.",
      "Type": "AWS::EC2::VPC::Id"
    },
    "WebserverPrivateIp": {
      "ConstraintDescription": "Web Server IP used for Big-IP pool Member",
      "Description": "Web Server IP used for Big-IP pool member",
      "Type": "String"
    }
  },
  "Resources": {
    "Bigip1ExternalInterface": {
      "Properties": {
        "Description": "Public External Interface for the Bigip",
        "GroupSet": [
          {
            "Ref": "BigipExternalSecurityGroup"
          }
        ],
        "SecondaryPrivateIpAddressCount": "1",
        "SubnetId": {
          "Ref": "Az1ExternalSubnet"
        }
      },
      "Type": "AWS::EC2::NetworkInterface"
    },
    "Bigip1ExternalSelfEipAddress": {
      "Properties": {
        "Domain": "vpc"
      },
      "Type": "AWS::EC2::EIP"
    },
    "Bigip1ExternalSelfEipAssociation": {
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "Bigip1ExternalSelfEipAddress",
            "AllocationId"
          ]
        },
        "NetworkInterfaceId": {
          "Ref": "Bigip1ExternalInterface"
        },
        "PrivateIpAddress": {
          "Fn::GetAtt": [
            "Bigip1ExternalInterface",
            "PrimaryPrivateIpAddress"
          ]
        }
      },
      "Type": "AWS::EC2::EIPAssociation"
    },
    "Bigip1Instance": {
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "commands": {
              "001-onboard-BIG-IP": {
                "command": {
                  "Fn::Join": [
                    " ",
                    [
                      "NAME_SERVER=`/shared/f5-cloud-libs/scripts/aws/getNameServer.sh eth1`;",
                      "f5-rest-node /shared/f5-cloud-libs/scripts/onboard.js",
                      "-o  /var/log/onboard.log",
                      "--background",
                      "--no-reboot",
                      "--host localhost",
                      "--user admin",
                      "--password '",
                      {
                        "Ref": "BigipAdminPassword"
                      },
                      "'",
                      "--set-password admin:'",
                      {
                        "Ref": "BigipAdminPassword"
                      },
                      "'",
                      "--hostname `curl http://169.254.169.254/latest/meta-data/hostname`",
                      "--ntp 0.us.pool.ntp.org",
                      "--ntp 1.us.pool.ntp.org",
                      "--tz UTC",
                      "--dns ${NAME_SERVER}",
                      "--module ltm:nominal",
                      "--file /shared/f5-cloud-libs/scripts/aws/firstrun.sh"
                    ]
                  ]
                }
              }
            },
            "files": {
              "/shared/f5-cloud-libs/scripts/aws/firstrun.config": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n",
                      "HOSTNAME=`curl http://169.254.169.254/latest/meta-data/hostname`\n",
                      "TZ='UTC'\n",
                      "BIGIP_ADMIN_USERNAME='",
                      {
                        "Ref": "BigipAdminUsername"
                      },
                      "'\n",
                      "BIGIP_ADMIN_PASSWORD='",
                      {
                        "Ref": "BigipAdminPassword"
                      },
                      "'\n",
                      "REGKEY=",
                      {
                        "Ref": "Bigip1LicenseKey"
                      },
                      "\n",
                      "MANAGEMENT_GUI_PORT='",
                      {
                        "Ref": "BigipManagementGuiPort"
                      },
                      "'\n",
                      "GATEWAY_MAC=`ifconfig eth0 | egrep HWaddr | awk '{print tolower($5)}'`\n",
                      "GATEWAY_CIDR_BLOCK=`curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`\n",
                      "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}\n",
                      "GATEWAY_PREFIX=${GATEWAY_CIDR_BLOCK#*/}\n",
                      "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`\n",
                      "VPC_CIDR_BLOCK=`curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/vpc-ipv4-cidr-block`\n",
                      "VPC_NET=${VPC_CIDR_BLOCK%/*}\n",
                      "VPC_PREFIX=${VPC_CIDR_BLOCK#*/}\n",
                      "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+2 }'`\n",
                      "POOLMEM='",
                      {
                        "Ref": "WebserverPrivateIp"
                      },
                      "'\n",
                      "POOLMEMPORT=80\n",
                      "APPNAME='demo-app-1'\n",
                      "VIRTUALSERVERPORT=80\n",
                      "CRT='default.crt'\n",
                      "KEY='default.key'\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000755",
                "owner": "root"
              },
              "/shared/f5-cloud-libs/scripts/aws/firstrun.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n",
                      ". /shared/f5-cloud-libs/scripts/aws/firstrun.config\n",
                      ". /shared/f5-cloud-libs/scripts/aws/firstrun.utils\n",
                      "FILE=/tmp/firstrun.log\n",
                      "if [ ! -e $FILE ]\n",
                      " then\n",
                      "     touch $FILE\n",
                      "     nohup $0 0<&- &>/dev/null &\n",
                      "     exit\n",
                      "fi\n",
                      "exec 1<&-\n",
                      "exec 2<&-\n",
                      "exec 1<>$FILE\n",
                      "exec 2>&1\n",
                      "date\n",
                      "checkF5Ready\n",
                      "echo 'starting tmsh config'\n",
                      "tmsh modify sys httpd ssl-port ${MANAGEMENT_GUI_PORT}\n",
                      "tmsh modify net self-allow defaults add { tcp:${MANAGEMENT_GUI_PORT} tcp:6123 tcp:6124 tcp:6125 tcp:6126 tcp:6127 tcp:6128 }\n",
                      "if [[ \"${MANAGEMENT_GUI_PORT}\" != \"443\" ]]; then tmsh modify net self-allow defaults delete { tcp:443 }; fi \n",
                      "tmsh save /sys config\n",
                      "echo 'start install byol license'\n",
                      "networkUp 120 \n",
                      "LicenseBigIP ${REGKEY}\n",
                      "checkStatusnoret\n",
                      "sleep 20 \n",
                      "tmsh save /sys config\n",
                      "echo 'provisioning asm'\n",
                      "tmsh modify /sys provision asm level nominal\n",
                      "checkretstatus='stop'\n",
                      "while [[ $checkretstatus != \"run\" ]]; do\n",
                      "     checkStatus\n",
                      "     if [[ $checkretstatus == \"restart\" ]]; then\n",
                      "         echo restarting\n",
                      "         tmsh modify /sys provision asm level none\n",
                      "         checkStatusnoret\n",
                      "         checkretstatus='stop'\n",
                      "         tmsh modify /sys provision asm level nominal\n",
                      "     fi\n",
                      "done\n",
                      "echo 'done provisioning asm'\n",
                      "tmsh create ltm pool ${APPNAME}-pool members add { ${POOLMEM}:${POOLMEMPORT} } monitor http\n",
                      "curl -o /home/admin/asm-policy-linux-high.xml http://cdn.f5.com/product/templates/utils/asm-policy-linux-high.xml \n",
                      "tmsh load asm policy file /home/admin/asm-policy-linux-high.xml\n",
                      "# modify asm policy names below (ex. /Common/linux-high) to match name in xml\n",
                      "tmsh modify asm policy /Common/linux-high active\n",
                      "tmsh create ltm policy app-ltm-policy strategy first-match legacy\n",
                      "tmsh modify ltm policy app-ltm-policy controls add { asm }\n",
                      "tmsh modify ltm policy app-ltm-policy rules add { associate-asm-policy { actions replace-all-with { 0 { asm request enable policy /Common/linux-high } } } }\n",
                      "tmsh create ltm virtual /Common/${APPNAME}-${VIRTUALSERVERPORT} { destination 0.0.0.0:${VIRTUALSERVERPORT} mask any ip-protocol tcp policies replace-all-with { app-ltm-policy { } } pool /Common/${APPNAME}-pool profiles replace-all-with { http { } tcp { } websecurity { } } security-log-profiles replace-all-with { \"Log illegal requests\" } source 0.0.0.0/0 source-address-translation { type automap } translate-address enabled translate-port enabled}\n",
                      "tmsh save /sys config\n",
                      "date\n",
                      "# for security purposes, remove firstrun.config\n",
                      "# rm /shared/f5-cloud-libs/scripts/aws/firstrun.config\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000755",
                "owner": "root"
              },
              "/shared/f5-cloud-libs/scripts/aws/firstrun.utils": {
                "group": "root",
                "mode": "000755",
                "owner": "root",
                "source": "http://cdn.f5.com/product/templates/utils/firstrun.utils"
              }
            },
            "sources": {
              "/shared": "https://f5-cloud-libs.s3.amazonaws.com/f5-cloud-libs.tar.gz"
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "BigipRegionMap",
            {
              "Ref": "AWS::Region"
            },
            {
              "Ref": "BigipPerformanceType"
            }
          ]
        },
        "InstanceType": {
          "Ref": "BigipInstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "NetworkInterfaces": [
          {
            "Description": "Public or External Interface",
            "DeviceIndex": "0",
            "NetworkInterfaceId": {
              "Ref": "Bigip1ExternalInterface"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "Big-IP: ",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r ",
                "Bigip1Instance",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::EC2::Instance"
    }
  }
}
