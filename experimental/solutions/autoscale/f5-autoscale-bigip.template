{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "This template deploys an autoscaling group for utility instances BIG-IP. Example scaling policies and CloudWatch alarms are associated with the autoscaling group.",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "DEPLOYMENT"
          },
          "Parameters": [
            "deploymentName"
          ]
        },
        {
          "Label": {
            "default": "NETWORKING CONFIGURATION"
          },
          "Parameters": [
            "vpc",
            "availabilityZones",
            "subnets",
            "bigipSecurityGroup",
            "bigipElasticLoadBalancer"
          ]
        },
        {
          "Label": {
              "default": "INSTANCE CONFIGURATION"
            },
          "Parameters": [
            "keyName",
            "sshLocation",
            "instanceType",
            "performanceType",
            "throughput",            
            "adminPassword",
            "managementGuiPort",
            "timezone",
            "ntpServer"
          ]
        },
        {
          "Label": {
            "default": "AUTO SCALING CONFIGURATION"
          },
          "Parameters": [
            "scalingMinSize",
            "scalingMaxSize",
            "scaleDownBytesThreshold",
            "scaleUpBytesThreshold",
            "notificationEmail"
          ]
        },
        {
          "Label": {
            "default": "WAF VIRTUAL SERVICE CONFIGURATION"
          },
          "Parameters": [
            "virtualServicePort",
            "applicationPort",
            "appInternalElbDnsName",
            "policyLevel"
          ]
        },
        {
          "Label": {
            "default": "TAGS"
          },
          "Parameters": [
            "application",
            "environment",
            "group",
            "owner",
            "costcenter"
          ]
        }
      ],
      "ParameterLabels": {
        "deploymentName" : {
          "default": "Deployment Name"
        },
        "vpc": {
          "default": "VPC Id"
        },
        "availabilityZones": {
          "default": "Availability Zone(s)"
        },
        "subnets": {
          "default": "Subnet Id(s)"
        },
        "bigipSecurityGroup": {
          "default": "Security Group for BIG-IPs"
        },
        "bigipElasticLoadBalancer": {
          "default": "Elastic Load Balancer for BIG-IPs"
        },
        "keyName": {
          "default": "Key Name"
        },
        "sshLocation": {
          "default": "SSH Location"
        },
        "instanceType": {
          "default": "BIG-IP Instance Type"
        },
        "performanceType": {
          "default": "BIG-IP Performance Type"
        },
        "throughput": {
          "default": "BIG-IP Throughput"
        },
        "adminPassword": {
          "default": "BIG-IP Admin Password"
        },
        "managementGuiPort": {
          "default": "BIG-IP GUI Port"
        },
        "timezone":{
          "default": "Timezone (Olson)"
        },
        "ntpServer":{
          "default": "NTP Server"
        },
        "scalingMinSize": {
          "default": "Minimum Instances"
        },
        "scalingMaxSize": {
          "default": "Maximum Instances"
        },
        "scaleDownBytesThreshold": {
          "default": "Scale Down Bytes Threshold"
        },
        "scaleUpBytesThreshold": {
          "default": "Scale Up Bytes Threshold"
        },
        "notificationEmail": {
          "default": "Notification Email"
        },
        "virtualServicePort": {
          "default": "Virtual Service Port"
        },
        "applicationPort": {
          "default": "Application Pool Member Port"
        },
        "appInternalElbDnsName": {
          "default": "Elastic Load Balancer for Apps"
        },
        "policyLevel": {
          "default": "WAF Policy Level"
        },
        "application": {
          "default": "Application"
        },
        "environment": {
          "default": "Environment"
        },
        "group": {
          "default": "Group"
        },
        "owner": {
          "default": "Owner"
        },
        "costcenter": {
          "default": "Costcenter"
        }
      }
    }
  },
  "Parameters": {
    "deploymentName" : {
      "Description" : "Deployment Name use in creating object names",
      "Type" : "String",
      "MaxLength": 25,
      "Default": "<replace>Acme<replace>"
    },
    "vpc": {
      "Description": "VPC to deploy BIG-IPs",
      "Type": "AWS::EC2::VPC::Id"
    },
    "availabilityZones": {
      "Description": "Availability Zones to deploy BIG-IPs (Recommend at least 2)",
      "Type": "List<AWS::EC2::AvailabilityZone::Name>"
    },
    "subnets": {
      "Description": "Public or External Subnet IDs of above Availability Zones",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "bigipSecurityGroup": {
      "Description": "Existing Security Group for BIG-IPs",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "bigipElasticLoadBalancer": {
      "Description": "Elastic Load Balancer group for BIG-IPs, e.g. AcmeBigipELB",
      "Type": "String",
      "Default": "<replace>AcmeBigipELB<replace>"
    },
    "keyName": {
      "Description": "Existing EC2 KeyPair to enable SSH access to the BIG-IP instance",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "sshLocation" : {
      "Description" : "IP address range that can SSH to the BIG-IP instances (Default 0.0.0.0/0)",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "instanceType": {
      "Description": "BIG-IP Instance Type (Default m3.2xlarge)",
      "Type": "String",
      "Default": "m3.2xlarge",
      "AllowedValues": [
        "t2.medium",
        "t2.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge"
      ],
      "ConstraintDescription": "must be a valid Big-IP virtual EC2 instance type."
    },
    "performanceType": {
      "Description": "BIG-IP Performance Type (Default Best)",
      "Type": "String",
      "Default": "Best",
      "AllowedValues": [
        "Good",
        "Better",
        "Best"
      ],
      "ConstraintDescription": "Must be a valid F5 Big-IP performance type"
    },
    "throughput": {
      "Description": "BIG-IP Throughput (Default 1000Mbps)",
      "Type": "String",
      "Default": "1000Mbps",
      "AllowedValues": [
        "25Mbps",
        "200Mbps",
        "1000Mbps"
      ],
      "ConstraintDescription": "Please select your desired throughput"
    },
    "adminPassword": {
        "ConstraintDescription": "Please verify your BIG-IP Admin Password",
        "Description": "BIG-IP Admin Password",
        "MaxLength": "255",
        "MinLength": "1",
        "NoEcho": true,
        "Type": "String"
    },
    "managementGuiPort": {
      "Description": "Port of BIG-IP management GUI (Default 8443)",
      "Type": "Number",
      "Default": 8443,
      "ConstraintDescription": "Must be a valid, unused port on BIG-IP."
    },
    "timezone": {
      "Description": "Olson timezone string from /usr/share/zoneinfo (Default UTC)",
      "Default": "UTC",
      "Type": "String"
    },
    "ntpServer": {
      "Description": "NTP server (Default 0.pool.ntp.org)",
      "Default": "0.pool.ntp.org",
      "Type": "String"
    },
    "scalingMinSize": {
      "Description": "Minimum number of BIG-IP instances (1-8) to be available in the AutoScale Group (Default 1)",
      "Default": "1",
      "ConstraintDescription": "Must be a number between 1-8",
      "Type": "Number",
      "MaxValue": "8",
      "MinValue": "1"
    },
    "scalingMaxSize": {
      "Description": "Maximum number of BIG-IP instances (2-8) that can be created in the AutoScale Group (Default 3)",
      "Default": "3",
      "ConstraintDescription": "Must be a number between 2-8.",
      "Type": "Number",
      "MaxValue": "8",
      "MinValue": "2"
    },
    "scaleDownBytesThreshold": {
      "Description": "Incoming Bytes Threshold to begin Scaling Down BIG-IP Instances (Default 10000)",
      "Default": "10000",
      "Type": "Number"
    },
    "scaleUpBytesThreshold": {
      "Description": "Incoming Bytes Threshold to begin Scaling Up BIG-IP Instances (Default 35000)",
      "Default": "35000",
      "Type": "Number"
    },
    "notificationEmail": {
      "Description": "Valid email address to send AutoScaling Event Notifications (OPTIONAL)",
      "ConstraintDescription": "Must be a valid email address.",
      "Type": "String"
    },
    "virtualServicePort": {
      "Description": "Virtual Service Port on BIG-IP (Default 80)",
      "Default": "80",
      "ConstraintDescription": "Must be a valid port number (1-65535).",
      "Type": "Number",
      "MaxValue": "65535",
      "MinValue": "1"
    },
    "applicationPort": {
      "Description": "Application Pool Member Port on BIG-IP (Default 80)",
      "Default": "80",
      "ConstraintDescription": "Must be a valid port number (1-65535).",
      "Type": "Number",
      "MaxValue": "65535",
      "MinValue": "1"
    },
    "appInternalElbDnsName": {
      "Description": "DNS of the ELB used for the application, e.g. Acme.region.elb.amazonaws.com",
      "Type": "String",
      "Default": "<replace>Acme.region.elb.amazonaws.com<replace>"
    },
    "policyLevel": {
      "Description": "WAF Policy Level to protect the application (Default high)",
      "Type": "String",
      "Default": "high",
      "AllowedValues": [
        "low",
        "medium",
        "high"
      ],
      "ConstraintDescription": "Please select desired WAF Policy Level"
    },
    "application": {
      "Default": "f5app",
      "Description": "Application Tag (Default f5app)",
      "Type": "String"
    },
    "environment": {
      "Default": "f5env",
      "Description": "Environment Name Tag (Default f5env)",
      "Type": "String"
    },
    "group": {
      "Default": "f5group",
      "Description": "Group Tag (Default f5group)",
      "Type": "String"
    },
    "owner": {
      "Default": "f5owner",
      "Description": "Owner Tag (Default f5owner)",
      "Type": "String"
    },
    "costcenter": {
      "Default": "f5costcenter",
      "Description": "Costcenter Tag (Default f5costcenter)",
      "Type": "String"
    }
  },
  "Mappings": {
    "BigipRegionMap": {
      "ap-northeast-1": {
        "Best1000Mbps": "ami-acf82acd", 
        "Best200Mbps": "ami-6bfc2e0a", 
        "Best25Mbps": "ami-a6f92bc7", 
        "Better1000Mbps": "ami-aff82ace", 
        "Better200Mbps": "ami-69f92b08", 
        "Better25Mbps": "ami-1afd2f7b", 
        "Good1000Mbps": "ami-3ef82a5f", 
        "Good200Mbps": "ami-62fc2e03", 
        "Good25Mbps": "ami-3af82a5b"
      }, 
      "ap-southeast-1": {
        "Best1000Mbps": "ami-ab78ddc8", 
        "Best200Mbps": "ami-d37edbb0", 
        "Best25Mbps": "ami-4e79dc2d", 
        "Better1000Mbps": "ami-d47fdab7", 
        "Better200Mbps": "ami-7f78dd1c", 
        "Better25Mbps": "ami-4278dd21", 
        "Good1000Mbps": "ami-d87cd9bb", 
        "Good200Mbps": "ami-da7cd9b9", 
        "Good25Mbps": "ami-d47cd9b7"
      }, 
      "ap-southeast-2": {
        "Best1000Mbps": "ami-c2e8d8a1", 
        "Best200Mbps": "ami-c4e8d8a7", 
        "Best25Mbps": "ami-bdecdcde", 
        "Better1000Mbps": "ami-6febdb0c", 
        "Better200Mbps": "ami-b1ebdbd2", 
        "Better25Mbps": "ami-42e8d821", 
        "Good1000Mbps": "ami-bcebdbdf", 
        "Good200Mbps": "ami-dbebdbb8", 
        "Good25Mbps": "ami-58e9d93b"
      }, 
      "eu-central-1": {
        "Best1000Mbps": "ami-2157aa4e", 
        "Best200Mbps": "ami-8055a8ef", 
        "Best25Mbps": "ami-2c56ab43", 
        "Better1000Mbps": "ami-2f57aa40", 
        "Better200Mbps": "ami-2854a947", 
        "Better25Mbps": "ami-2657aa49", 
        "Good1000Mbps": "ami-e357aa8c", 
        "Good200Mbps": "ami-2557aa4a", 
        "Good25Mbps": "ami-cb55a8a4"
      }, 
      "eu-west-1": {
        "Best1000Mbps": "ami-8af48ef9", 
        "Best200Mbps": "ami-fbeb9188", 
        "Best25Mbps": "ami-cbf58fb8", 
        "Better1000Mbps": "ami-c8f58fbb", 
        "Better200Mbps": "ami-51f18b22", 
        "Better25Mbps": "ami-7bf38908", 
        "Good1000Mbps": "ami-b5f68cc6", 
        "Good200Mbps": "ami-65f58f16", 
        "Good25Mbps": "ami-91f18be2"
      }, 
      "sa-east-1": {
        "Best1000Mbps": "ami-7142d11d", 
        "Best200Mbps": "ami-8b5fcce7", 
        "Best25Mbps": "ami-8a5ecde6", 
        "Better1000Mbps": "ami-955fccf9", 
        "Better200Mbps": "ami-c142d1ad", 
        "Better25Mbps": "ami-c342d1af", 
        "Good1000Mbps": "ami-335dce5f", 
        "Good200Mbps": "ami-1359ca7f", 
        "Good25Mbps": "ami-1f59ca73"
      }, 
      "us-east-1": {
        "Best1000Mbps": "ami-1d057e0a", 
        "Best200Mbps": "ami-0b7a011c", 
        "Best25Mbps": "ami-ce047fd9", 
        "Better1000Mbps": "ami-83047f94", 
        "Better200Mbps": "ami-84017a93", 
        "Better25Mbps": "ami-8f007b98", 
        "Good1000Mbps": "ami-98017a8f", 
        "Good200Mbps": "ami-a2017ab5", 
        "Good25Mbps": "ami-130c7704"
      }, 
      "us-west-1": {
        "Best1000Mbps": "ami-812668e1", 
        "Best200Mbps": "ami-05246a65", 
        "Best25Mbps": "ami-f0256b90", 
        "Better1000Mbps": "ami-822668e2", 
        "Better200Mbps": "ami-44226c24", 
        "Better25Mbps": "ami-8b256beb", 
        "Good1000Mbps": "ami-49256b29", 
        "Good200Mbps": "ami-a72769c7", 
        "Good25Mbps": "ami-e5246a85"
      }, 
      "us-west-2": {
        "Best1000Mbps": "ami-012ef261", 
        "Best200Mbps": "ami-8633efe6", 
        "Best25Mbps": "ami-792ff319", 
        "Better1000Mbps": "ami-5b29f53b", 
        "Better200Mbps": "ami-a031edc0", 
        "Better25Mbps": "ami-a731edc7", 
        "Good1000Mbps": "ami-6a2df10a", 
        "Good200Mbps": "ami-532ff333", 
        "Good25Mbps": "ami-dc2ef2bc"
      }
    },
    "AWSBigipThrougput": {
      "25Mbps": {
        "Good": "Good25Mbps",
        "Better": "Better25Mbps",
        "Best": "Best25Mbps"
      },
      "200Mbps": {
        "Good": "Good200Mbps",
        "Better": "Better200Mbps",
        "Best": "Best200Mbps"
      },
      "1000Mbps": {
        "Good": "Good1000Mbps",
        "Better": "Better1000Mbps",
        "Best": "Best1000Mbps"
      }
    }
  },
  "Resources": {
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "BucketOwnerFullControl"
      }
    },
    "BigipAutoScalingAccessRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "BigipAutoScalingAcccessPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "S3Bucket"
                        }
                      ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "S3Bucket"
                        },
                        "/*"
                      ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                      "autoscaling:DescribeAutoScalingGroups",
                      "autoscaling:DescribeAutoScalingInstances",
                      "autoscaling:SetInstanceProtection"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                      "ec2:DescribeInstances"
                  ],
                  "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "cloudwatch:PutMetricData"
                    ],
                    "Resource": [
                        "*"
                    ]
                }
              ]
            }
          }
        ]
      }
    },
    "BigipAutoScalingInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "BigipAutoScalingAccessRole"
          }
        ]
      }
    },
    "SNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Ref": "notificationEmail"
            },
            "Protocol": "email"
          }
        ]
      }
    },
    "BigipLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "files": {
              "/config/cloud/asm-policy-linux.tar.gz":{
                "source": "https://s3-us-west-2.amazonaws.com/f5-dev/asm-policy-linux.tar.gz",
                "mode": "000755",
                "owner": "root",
                "group": "root"
              },
              "/config/cloud/f5.http.v1.2.0rc4.tmpl":{
                "source": "http://cdn.f5.com/product/blackbox/staging/azure/f5.http.v1.2.0rc4.tmpl",
                "mode": "000755",
                "owner": "root",
                "group": "root"
              },                          
              "/config/cloud/f5-cloud-libs.tar.gz":{
                "source": "https://api.github.com/repos/F5Networks/f5-cloud-libs/tarball/syncFix",
                "mode": "000755",
                "owner": "root",
                "group": "root"
              },
              "/config/cloud/f5-aws-autoscale-cluster.tar.gz":{
                "source":"https://s3-us-west-2.amazonaws.com/f5-dev/f5-aws-autoscale-cluster.tar.gz",
                "mode": "000755",
                "owner": "root",
                "group": "root"
              },
              "/config/cloud/aws/firstrun.config": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n",
                      "HOSTNAME=`curl http://169.254.169.254/latest/meta-data/hostname`\n",
                      "APP_NAME='",
                      {
                        "Ref": "deploymentName"
                      },
                      "'\n",
                      "POOL_DNS='",
                      {
                        "Ref": "appInternalElbDnsName"
                      },
                      "'\n",
                      "POOL_MEMBER_PORT='",
                      {
                        "Ref": "applicationPort"
                      },
                      "'\n",
                      "VS_PORT='",
                      {
                        "Ref": "virtualServicePort"
                      },
                      "'\n",
                      "POLICY_LEVEL='",
                      {
                        "Ref": "policyLevel"
                      },
                      "'\n",
                      "ADMIN_PASSWORD='",
                      {
                          "Ref": "adminPassword"
                      },
                      "'\n",
                      "MANAGEMENT_GUI_PORT='",
                      {
                        "Ref": "managementGuiPort"
                      },
                      "'\n",
                      "S3_BUCKET='",
                      {
                        "Ref": "S3Bucket"
                      },
                      "'\n"
                    ]
                  ]
                }
              },
              "/config/cloud/aws/custom-config.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n",
                      "date\n",
                      ". /config/cloud/aws/firstrun.config\n",
                      "BIGIP_ASG_NAME=`f5-rest-node /config/cloud/aws/getAutoscaleGroupName.js` \n",
                      "#BIGIP_ASG_NAME=`f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/runScript.js --file /config/cloud/aws/getAutoscaleGroupName.js -o /var/log/getAutoscaleGroupName.log` \n",
                      "tmsh modify sys autoscale-group autoscale-group-id ${BIGIP_ASG_NAME} \n",
                      "tmsh create sys icall script uploadMetrics definition { exec /config/cloud/aws/reportMetrics.sh }\n",
                      "tmsh create sys icall handler periodic /Common/metricUploadHandler { first-occurrence now interval 60 script /Common/uploadMetrics }\n",
                      "echo 'Attempting to Join or Initiate Autoscale Cluster' \n",
                      "f5-rest-node /config/cloud/aws/autoscale-cluster.js -c join --log-level debug --output /var/log/aws-autoscale-cluster.log\n",
                      "if [ -f /config/cloud/aws/master ]; then \n",                      
                      "   echo 'SELF-SELECTED as Master ... Initiated Autoscale Cluster ... Loading default config'\n",
                      "   tmsh create cm device-group autoscale-group devices add { ${HOSTNAME} } type sync-failover auto-sync enabled network-failover disabled\n",
                      "   tmsh create sys icall script ClusterUpdate definition { exec f5-rest-node /config/cloud/aws/autoscale-cluster.js -c update --log-level debug --output /var/log/aws-autoscale-cluster.log }\n",
                      "   tmsh create sys icall handler periodic /Common/ClusterUpdateHandler { first-occurrence now interval 600 script /Common/ClusterUpdate }\n",
                      "   tmsh save /sys config\n",
                      "####################\n",
                      "   tmsh create ltm node ${APP_NAME} fqdn { name ${POOL_DNS} }\n",
                      "   tmsh create ltm pool ${APP_NAME}_pool members add { ${APP_NAME}:${POOL_MEMBER_PORT} } monitor http\n",
                      "   # BEGIN CUSTOMIZE:  Policy Name/Policy URL, etc. \n",
                      "   tmsh load sys application template /config/cloud/f5.http.v1.2.0rc4.tmpl\n",
                      "   tmsh load asm policy file /config/cloud/asm-policy-linux-${POLICY_LEVEL}.xml\n",
                      "   #tmsh load asm policy file /config/cloud/asm-policy-linux-high.xml\n",
                      "   #tmsh load asm policy file /config/cloud/asm-policy-linux-medium.xml\n",
                      "   #tmsh load asm policy file /config/cloud/asm-policy-linux-low.xml\n",
                      "   # modify asm policy names below (ex. /Common/linux-${POLICY_LEVEL}) to match policy name in the xml file\n",
                      "   tmsh modify asm policy /Common/linux-${POLICY_LEVEL} active\n",
                      "   tmsh create ltm policy app-ltm-policy strategy first-match legacy\n",
                      "   tmsh modify ltm policy app-ltm-policy controls add { asm }\n",
                      "   tmsh modify ltm policy app-ltm-policy rules add { associate-asm-policy { actions replace-all-with { 0 { asm request enable policy /Common/linux-${POLICY_LEVEL} } } } }\n",
                      "   tmsh create ltm virtual ${APP_NAME}_vs_${VS_PORT} { destination 0.0.0.0:${VS_PORT} mask any ip-protocol tcp policies replace-all-with { app-ltm-policy { } } pool ${APP_NAME}_pool profiles replace-all-with { tcp { } http { } websecurity { } } security-log-profiles replace-all-with { \"Log illegal requests\" } source 0.0.0.0/0 source-address-translation { type automap } translate-address enabled translate-port enabled}\n",
                      "####################\n",
                      "   tmsh save /sys config\n",
                      "fi\n",
                      "date\n",
                      "echo 'custom-config.sh complete'\n"
                    ]
                  ]
                },
                "mode": "000755",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "001-upack-libs": {
                "command": { "Fn::Join" : [ " ", [
                                                  "tar xvfz /config/cloud/f5-aws-autoscale-cluster.tar.gz -C /config/cloud;",
                                                  "tar xvfz /config/cloud/asm-policy-linux.tar.gz -C /config/cloud;",
                                                  "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules;",
                                                  "mv /config/cloud/aws/node_modules/F5Networks-f5-cloud-libs-* /config/cloud/aws/node_modules/f5-cloud-libs;",
                                                  "cd /config/cloud/aws/node_modules/f5-cloud-libs;",
                                                  "npm install --production;"
                                                ]
                                          ]
                          }
              },
              "002-1nic-setup": {
                "command": { "Fn::Join" : [ " ", [
                                                  "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/runScript.js",
                                                  "--file /config/cloud/aws/node_modules/f5-cloud-libs/scripts/aws/1nicSetup.sh",
                                                  "--cwd /config/cloud/aws/node_modules/f5-cloud-libs/scripts/aws",
                                                  "-o /var/log/1nicSetup.log",
                                                  "--background",
                                                  "--signal 1_NIC_SETUP_DONE"
                                                ]
                                          ]
                          }
              },  
              "003-onboard-BIG-IP": {
                "command": { "Fn::Join" : [ " ", [
                                                  "NAME_SERVER=`/config/cloud/aws/node_modules/f5-cloud-libs/scripts/aws/getNameServer.sh eth0`;",
                                                  "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/onboard.js",
                                                  "--wait-for 1_NIC_SETUP_DONE",
                                                  "-o  /var/log/onboard.log",
                                                  "--background",
                                                  "--no-reboot",
                                                  "--host localhost",
                                                  "--user admin",
                                                  "--password '", { "Ref": "adminPassword" },"'",
                                                  "--set-password admin:'", { "Ref": "adminPassword" },"'",
                                                  "--hostname `curl http://169.254.169.254/latest/meta-data/hostname`",
                                                  "--ntp ", { "Ref": "ntpServer" },
                                                  "--tz ", { "Ref": "timezone" },
                                                  "--dns ${NAME_SERVER}",
                                                  "--ssl-port ", { "Ref": "managementGuiPort" },
                                                  "--module ltm:nominal",
                                                  "--module asm:nominal",
                                                  "--ping"
                                                ]
                                          ]
                          }
              },
              "004-custom-config": {
                "command": { "Fn::Join" : [ " ", [
                                                  "f5-rest-node /config/cloud/aws/node_modules/f5-cloud-libs/scripts/runScript.js",
                                                  "--file /config/cloud/aws/custom-config.sh",
                                                  "--cwd /config/cloud/aws",
                                                  "-o /var/log/custom-config.log",
                                                  "--background",
                                                  "--wait-for ONBOARD_DONE"
                                                ]
                                          ]
                          }
              }            
            }
          }
        }
      },
      "Properties": {
        "AssociatePublicIpAddress": true,
        "ImageId": {
          "Fn::FindInMap": [
            "BigipRegionMap",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSBigipThrougput",
                {
                  "Ref": "throughput"
                },
                {
                  "Ref": "performanceType"
                }
              ]
            }
          ]
        },
        "InstanceMonitoring" : false,
        "InstanceType": {
          "Ref": "instanceType"
        },
        "IamInstanceProfile": {
          "Ref": "BigipAutoScalingInstanceProfile"
        },
        "KeyName": {
          "Ref": "keyName"
        },
        "SecurityGroups": [
          {
            "Ref": "bigipSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -x\n",
                "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v -s ",
                {
                  "Ref": "AWS::StackId"
                },
                " -r BigipLaunchConfig",
                " --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "BigipAutoscaleGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": { "Ref": "subnets" },
        "Cooldown": "1500",
        "LoadBalancerNames": [
          {
            "Ref": "bigipElasticLoadBalancer"
          }
        ],
        "HealthCheckGracePeriod": "1500",
        "HealthCheckType": "ELB",
        "LaunchConfigurationName": {
          "Ref": "BigipLaunchConfig"
        },
        "MaxSize": {
          "Ref": "scalingMaxSize"
        },
        "MinSize": {
          "Ref": "scalingMinSize"
        },
        "DesiredCapacity" : {
          "Ref": "scalingMinSize"
        },
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "NotificationConfigurations": [
          {
            "TopicARN": {
              "Ref": "SNSTopic"
            },
            "NotificationTypes": [
              "autoscaling:EC2_INSTANCE_LAUNCH",
              "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
              "autoscaling:EC2_INSTANCE_TERMINATE",
              "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "BIG-IP Autoscale Instance: ",
                  {
                    "Ref": "deploymentName"
                  }
                ]
              ]
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "application"
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "environment"
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "Group",
            "Value": {
              "Ref": "group"
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "Owner",
            "Value": {
              "Ref": "owner"
            },
            "PropagateAtLaunch": true
          },
          {
            "Key": "Costcenter",
            "Value": {
              "Ref": "costcenter"
            },
            "PropagateAtLaunch": true
          }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": "2",
          "MinInstancesInService": {
            "Ref": "scalingMinSize"
          },
          "PauseTime": "PT25M"
        }
      }
    },
    "BigipScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "BigipAutoscaleGroup"
        },
        "Cooldown": "1500",
        "ScalingAdjustment": "1"
      }
    },
    "BigipScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "BigipAutoscaleGroup"
        },
        "Cooldown": "1500",
        "ScalingAdjustment": "-1"
      }
    },
    "BigipHighbytesAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "DependsOn": "BigipAutoscaleGroup",
      "Properties": {
        "ActionsEnabled": "True",
        "AlarmActions": [
          {
            "Ref": "BigipScaleUpPolicy"
          }
        ],
        "AlarmDescription": "Server side network out exceeds average threshold",
        "ComparisonOperator": "GreaterThanThreshold",
        "EvaluationPeriods": "1",
        "MetricName": "server_side_traffic.bytes_in-per-sec",
        "Namespace": {
          "Ref": "BigipAutoscaleGroup"
        },
        "Period": "60",
        "Statistic": "Average",
        "Threshold": {
          "Ref": "scaleUpBytesThreshold"
        }
      }
    },
    "BigipLowbytesAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "DependsOn": "BigipAutoscaleGroup",
      "Properties": {
        "ActionsEnabled": "True",
        "AlarmActions": [
          {
            "Ref": "BigipScaleDownPolicy"
          }
        ],
        "AlarmDescription": "Server side network out below average threshold",
        "ComparisonOperator": "LessThanThreshold",
        "EvaluationPeriods": "5",
        "MetricName": "server_side_traffic.bytes_in-per-sec",
        "Namespace": {
          "Ref": "BigipAutoscaleGroup"
        },
        "Period": "60",
        "Statistic": "Average",
        "Threshold": {
          "Ref": "scaleDownBytesThreshold"
        }
      }
    }
  },
  "Outputs": {
    "bigipAutoscaleGroup": {
      "Value": {
        "Ref": "BigipAutoscaleGroup"
      }
    }
  }
}
