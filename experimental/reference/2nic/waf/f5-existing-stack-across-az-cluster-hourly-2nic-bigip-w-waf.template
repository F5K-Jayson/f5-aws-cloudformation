{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation Template for creating a Across-AZs cluster of 2nic Big-IPs in an existing VPC **WARNING** This template creates Amazon EC2 Instances. You will be billed for the AWS resources used if you create a stack from this template.",
    "Mappings": {
        "BigipRegionMap": {
            "ap-northeast-1": {
                "Best1000Mbps": "ami-b700d1d6",
                "Best200Mbps": "ami-9a1ecffb",
                "Best25Mbps": "ami-8300d1e2",
                "Better1000Mbps": "ami-2c05d44d",
                "Better200Mbps": "ami-5802d339",
                "Better25Mbps": "ami-e602d387",
                "Good1000Mbps": "ami-df03d2be",
                "Good200Mbps": "ami-5604d537",
                "Good25Mbps": "ami-9503d2f4"
            },
            "ap-southeast-1": {
                "Best1000Mbps": "ami-844298e7",
                "Best200Mbps": "ami-6d419b0e",
                "Best25Mbps": "ami-07409a64",
                "Better1000Mbps": "ami-05409a66",
                "Better200Mbps": "ami-50439933",
                "Better25Mbps": "ami-c4419ba7",
                "Good1000Mbps": "ami-d4419bb7",
                "Good200Mbps": "ami-db419bb8",
                "Good25Mbps": "ami-f4439997"
            },
            "ap-southeast-2": {
                "Best1000Mbps": "ami-6789b804",
                "Best200Mbps": "ami-6389b800",
                "Best25Mbps": "ami-7989b81a",
                "Better1000Mbps": "ami-8d89b8ee",
                "Better200Mbps": "ami-ac88b9cf",
                "Better25Mbps": "ami-388bba5b",
                "Good1000Mbps": "ami-358bba56",
                "Good200Mbps": "ami-0c86b76f",
                "Good25Mbps": "ami-0287b661"
            },
            "eu-central-1": {
                "Best1000Mbps": "ami-9cb449f3",
                "Best200Mbps": "ami-68b04d07",
                "Best25Mbps": "ami-deb64bb1",
                "Better1000Mbps": "ami-20b64b4f",
                "Better200Mbps": "ami-16b14c79",
                "Better25Mbps": "ami-86b548e9",
                "Good1000Mbps": "ami-30b14c5f",
                "Good200Mbps": "ami-0fb44960",
                "Good25Mbps": "ami-d2b64bbd"
            },
            "eu-west-1": {
                "Best1000Mbps": "ami-77c4bd04",
                "Best200Mbps": "ami-a93840da",
                "Best25Mbps": "ami-41c6bf32",
                "Better1000Mbps": "ami-5ec7be2d",
                "Better200Mbps": "ami-03c3ba70",
                "Better25Mbps": "ami-e0384093",
                "Good1000Mbps": "ami-a1c5bcd2",
                "Good200Mbps": "ami-2dc5bc5e",
                "Good25Mbps": "ami-27c5bc54"
            },
            "sa-east-1": {
                "Best1000Mbps": "ami-cdc251a1",
                "Best200Mbps": "ami-cbdd4ea7",
                "Best25Mbps": "ami-7ec25112",
                "Better1000Mbps": "ami-ffdc4f93",
                "Better200Mbps": "ami-7ec75412",
                "Better25Mbps": "ami-a2c152ce",
                "Good1000Mbps": "ami-97dd4efb",
                "Good200Mbps": "ami-adc152c1",
                "Good25Mbps": "ami-27c0534b"
            },
            "us-east-1": {
                "Best1000Mbps": "ami-a1c8b5b6",
                "Best200Mbps": "ami-64ceb373",
                "Best25Mbps": "ami-b5ceb3a2",
                "Better1000Mbps": "ami-69d2af7e",
                "Better200Mbps": "ami-64ccb173",
                "Better25Mbps": "ami-bdcab7aa",
                "Good1000Mbps": "ami-7dcdb06a",
                "Good200Mbps": "ami-78cdb06f",
                "Good25Mbps": "ami-a9cfb2be"
            },
            "us-west-1": {
                "Best1000Mbps": "ami-4f7a352f",
                "Best200Mbps": "ami-5c7b343c",
                "Best25Mbps": "ami-997a35f9",
                "Better1000Mbps": "ami-da7b34ba",
                "Better200Mbps": "ami-767e3116",
                "Better25Mbps": "ami-8c7b34ec",
                "Good1000Mbps": "ami-4d7b342d",
                "Good200Mbps": "ami-747e3114",
                "Good25Mbps": "ami-987a35f8"
            },
            "us-west-2": {
                "Best1000Mbps": "ami-4775a727",
                "Best200Mbps": "ami-9d74a6fd",
                "Best25Mbps": "ami-8c77a5ec",
                "Better1000Mbps": "ami-a873a1c8",
                "Better200Mbps": "ami-d875a7b8",
                "Better25Mbps": "ami-677ba907",
                "Good1000Mbps": "ami-e94d9f89",
                "Good200Mbps": "ami-1e7aa87e",
                "Good25Mbps": "ami-3e70a25e"
            }
        }
    },
    "Outputs": {
        "Bigip1ExternalInterfacePrivateIp": {
            "Description": "Internally routable IP of the public interface on BIG-IP",
            "Value": {
                "Fn::GetAtt": [
                    "Bigip1subnet1Az1Interface",
                    "PrimaryPrivateIpAddress"
                ]
            }
        },
        "Bigip1InstanceId": {
            "Description": "Instance Id of BIG-IP in Amazon",
            "Value": {
                "Ref": "Bigip1Instance"
            }
        },
        "Bigip1ManagementEipAddress": {
            "Description": "IP address of the management port on BIG-IP",
            "Value": {
                "Ref": "Bigip1ManagementEipAddress"
            }
        },
        "Bigip1ManagementInterface": {
            "Description": "Management interface ID on BIG-IP",
            "Value": {
                "Ref": "Bigip1ManagementInterface"
            }
        },
        "Bigip1ManagementInterfacePrivateIp": {
            "Description": "Internally routable IP of the management interface on BIG-IP",
            "Value": {
                "Fn::GetAtt": [
                    "Bigip1ManagementInterface",
                    "PrimaryPrivateIpAddress"
                ]
            }
        },
        "Bigip1Url": {
            "Description": "BIG-IP Management GUI",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "Bigip1Instance",
                                "PublicIp"
                            ]
                        }
                    ]
                ]
            }
        },
        "Bigip1VipEipAddress": {
            "Description": "EIP address for VIP",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Ref": "Bigip1VipEipAddress"
                        },
                        ":80"
                    ]
                ]
            }
        },
        "Bigip1VipPrivateIp": {
            "Description": "VIP on External Interface Secondary IP 1",
            "Value": {
                "Fn::Select": [
                    "0",
                    {
                        "Fn::GetAtt": [
                            "Bigip1subnet1Az1Interface",
                            "SecondaryPrivateIpAddresses"
                        ]
                    }
                ]
            }
        },
        "Bigip1subnet1Az1Interface": {
            "Description": "External interface Id on BIG-IP",
            "Value": {
                "Ref": "Bigip1subnet1Az1Interface"
            }
        },
        "Bigip1subnet1Az1SelfEipAddress": {
            "Description": "IP Address of teh External interface attached to BIG-IP",
            "Value": {
                "Ref": "Bigip1subnet1Az1SelfEipAddress"
            }
        },
        "Bigip2ExternalInterfacePrivateIp": {
            "Description": "Internally routable IP of the public interface on BIG-IP",
            "Value": {
                "Fn::GetAtt": [
                    "Bigip2subnet1Az2Interface",
                    "PrimaryPrivateIpAddress"
                ]
            }
        },
        "Bigip2InstanceId": {
            "Description": "Instance Id of BIG-IP in Amazon",
            "Value": {
                "Ref": "Bigip2Instance"
            }
        },
        "Bigip2ManagementEipAddress": {
            "Description": "IP address of the management port on BIG-IP",
            "Value": {
                "Ref": "Bigip2ManagementEipAddress"
            }
        },
        "Bigip2ManagementInterface": {
            "Description": "Management interface ID on BIG-IP",
            "Value": {
                "Ref": "Bigip2ManagementInterface"
            }
        },
        "Bigip2ManagementInterfacePrivateIp": {
            "Description": "Internally routable IP of the management interface on BIG-IP",
            "Value": {
                "Fn::GetAtt": [
                    "Bigip2ManagementInterface",
                    "PrimaryPrivateIpAddress"
                ]
            }
        },
        "Bigip2Url": {
            "Description": "BIG-IP Management GUI",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "Bigip2Instance",
                                "PublicIp"
                            ]
                        }
                    ]
                ]
            }
        },
        "Bigip2subnet1Az2Interface": {
            "Description": "External interface Id on BIG-IP",
            "Value": {
                "Ref": "Bigip2subnet1Az2Interface"
            }
        },
        "Bigip2subnet1Az2SelfEipAddress": {
            "Description": "IP Address of teh External interface attached to BIG-IP",
            "Value": {
                "Ref": "Bigip2subnet1Az2SelfEipAddress"
            }
        },
        "availabilityZone1": {
            "Description": "Availability Zone",
            "Value": {
                "Fn::GetAtt": [
                    "Bigip1Instance",
                    "AvailabilityZone"
                ]
            }
        },
        "availabilityZone2": {
            "Description": "Availability Zone",
            "Value": {
                "Fn::GetAtt": [
                    "Bigip2Instance",
                    "AvailabilityZone"
                ]
            }
        }
    },
    "Parameters": {
        "Vpc": {
            "ConstraintDescription": "This must be an existing VPC within the working region.",
            "Type": "AWS::EC2::VPC::Id"
        },
        "adminPassword": {
            "ConstraintDescription": "Verify your BIG-IP Admin Password",
            "Description": "Type your BIG-IP Admin Password",
            "MaxLength": "255",
            "MinLength": "1",
            "NoEcho": true,
            "Type": "String"
        },
        "adminUsername": {
            "ConstraintDescription": "Verify your BIG-IP Admin Username",
            "Default": "admin",
            "Description": "Type your BIG-IP Admin Username",
            "MaxLength": "255",
            "MinLength": "1",
            "Type": "String"
        },
        "applicationTag": {
            "Default": "f5app",
            "Description": "Enter tag value to be used for application tag",
            "Type": "String"
        },
        "bigipExternalSecurityGroup": {
            "ConstraintDescription": "The security group ID must be within an existing VPC",
            "Description": "Public or External Security Group ID",
            "Type": "AWS::EC2::SecurityGroup::Id"
        },
        "bigipManagementSecurityGroup": {
            "ConstraintDescription": "The security group ID must be within an existing VPC",
            "Description": "BIG-IP Management Security Group",
            "Type": "AWS::EC2::SecurityGroup::Id"
        },
        "costcenterTag": {
            "Default": "f5costcenter",
            "Description": "Enter tag value to be used for application tag",
            "Type": "String"
        },
        "environmentTag": {
            "Default": "f5env",
            "Description": "Enter tag value to be used for environment tag",
            "Type": "String"
        },
        "groupTag": {
            "Default": "f5group",
            "Description": "Enter tag value to be used for group tag",
            "Type": "String"
        },
        "iamAccessKey": {
            "AllowedPattern": "[\\w]*",
            "ConstraintDescription": "can contain only ASCII characters.",
            "Description": "IAM Access Key",
            "MaxLength": "32",
            "MinLength": "16",
            "NoEcho": true,
            "Type": "String"
        },
        "iamSecretKey": {
            "AllowedPattern": "[\\x20-\\x7E]*",
            "ConstraintDescription": "can contain only ASCII characters.",
            "Description": "IAM Secret Key for BIG-IP",
            "MaxLength": "255",
            "MinLength": "1",
            "NoEcho": true,
            "Type": "String"
        },
        "imageName": {
            "AllowedValues": [
                "Best25Mbps",
                "Best200Mbps",
                "Best1000Mbps"
            ],
            "ConstraintDescription": "Must be a valid F5 BIG-IP performance type",
            "Default": "Best1000Mbps",
            "Description": "F5 BIG-IP Performance Type",
            "Type": "String"
        },
        "instanceType": {
            "AllowedValues": [
                "m3.2xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "cc2.8xlarge"
            ],
            "ConstraintDescription": "must be a valid BIG-IP EC2 instance type",
            "Default": "m3.2xlarge",
            "Description": "F5 BIG-IP Virtual Instance Type",
            "Type": "String"
        },
        "managementSubnetAz1": {
            "ConstraintDescription": "The subnet ID must be within an existing VPC",
            "Description": "Management Subnet ID",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "managementSubnetAz2": {
            "ConstraintDescription": "The subnet ID must be within an existing VPC",
            "Description": "Management Subnet ID",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "ownerTag": {
            "Default": "f5owner",
            "Description": "Enter tag value to be used for application tag",
            "Type": "String"
        },
        "restrictedSrcAddress": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Default": "0.0.0.0/0",
            "Description": " The IP address range that can be used to SSH to the EC2 instances",
            "MaxLength": "18",
            "MinLength": "9",
            "Type": "String"
        },
        "sshKey": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "subnet1Az1": {
            "ConstraintDescription": "The subnet ID must be within an existing VPC",
            "Description": "Public or External subnet ID",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "subnet1Az2": {
            "ConstraintDescription": "The subnet ID must be within an existing VPC",
            "Description": "Public or External subnet ID",
            "Type": "AWS::EC2::Subnet::Id"
        },
        "webserverPrivateIp": {
            "ConstraintDescription": "Web Server IP used for the BIG-IP pool Member",
            "Description": "Web Server IP used for BIG-IP pool member",
            "Type": "String"
        }
    },
    "Resources": {
        "Bigip1Instance": {
            "DependsOn": "Bigip2Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "001-onboard-BIG-IP": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "NAME_SERVER=`/shared/f5-cloud-libs/scripts/aws/getNameServer.sh eth1`;",
                                            "f5-rest-node /shared/f5-cloud-libs/scripts/onboard.js",
                                            "--log-level verbose",
                                            "-o  /var/log/onboard.log",
                                            "--background",
                                            "--no-reboot",
                                            "--host localhost",
                                            "--user admin",
                                            "--password '",
                                            {
                                                "Ref": "adminPassword"
                                            },
                                            "'",
                                            "--set-password admin:'",
                                            {
                                                "Ref": "adminPassword"
                                            },
                                            "'",
                                            "--hostname `curl http://169.254.169.254/latest/meta-data/hostname`",
                                            "--ntp 0.us.pool.ntp.org",
                                            "--ntp 1.us.pool.ntp.org",
                                            "--tz UTC",
                                            "--dns ${NAME_SERVER}",
                                            "--module ltm:nominal",
                                            "--module asm:nominal"
                                        ]
                                    ]
                                }
                            },
                            "firstrun-BIG-IP": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "f5-rest-node /shared/f5-cloud-libs/scripts/runScript.js",
                                            "--wait-for ONBOARD_DONE",
                                            "--file /tmp/firstrun.sh",
                                            "--log-level verbose",
                                            "-o /var/log/firstrun_1.log",
                                            "--background"
                                        ]
                                    ]
                                }
                            }
                        },
                        "files": {
                            "/tmp/firstrun.config": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "HOSTNAME=`curl http://169.254.169.254/latest/meta-data/hostname`\n",
                                            "TZ='UTC'\n",
                                            "BIGIP_ADMIN_USERNAME='",
                                            {
                                                "Ref": "adminUsername"
                                            },
                                            "'\n",
                                            "BIGIP_ADMIN_PASSWORD='",
                                            {
                                                "Ref": "adminPassword"
                                            },
                                            "'\n",
                                            "GATEWAY_MAC=`ifconfig eth1 | egrep HWaddr | awk '{print tolower($5)}'`\n",
                                            "GATEWAY_CIDR_BLOCK=`curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`\n",
                                            "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}\n",
                                            "GATEWAY_PREFIX=${GATEWAY_CIDR_BLOCK#*/}\n",
                                            "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`\n",
                                            "VPC_CIDR_BLOCK=`curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/vpc-ipv4-cidr-block`\n",
                                            "VPC_NET=${VPC_CIDR_BLOCK%/*}\n",
                                            "VPC_PREFIX=${VPC_CIDR_BLOCK#*/}\n",
                                            "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+2 }'`\n",
                                            "MGMTIP='",
                                            {
                                                "Fn::GetAtt": [
                                                    "Bigip1ManagementInterface",
                                                    "PrimaryPrivateIpAddress"
                                                ]
                                            },
                                            "'\n",
                                            "EXTIP='",
                                            {
                                                "Fn::GetAtt": [
                                                    "Bigip1subnet1Az1Interface",
                                                    "PrimaryPrivateIpAddress"
                                                ]
                                            },
                                            "'\n",
                                            "EXTPRIVIP='",
                                            {
                                                "Fn::Select": [
                                                    "0",
                                                    {
                                                        "Fn::GetAtt": [
                                                            "Bigip1subnet1Az1Interface",
                                                            "SecondaryPrivateIpAddresses"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "'\n",
                                            "EXTMASK='24'\n",
                                            "POOLMEM='",
                                            {
                                                "Ref": "webserverPrivateIp"
                                            },
                                            "'\n",
                                            "POOLMEMPORT=80\n",
                                            "APPNAME='demo-app-1'\n",
                                            "VIRTUALSERVERPORT=80\n",
                                            "CRT='default.crt'\n",
                                            "KEY='default.key'\n",
                                            "PEER_HOSTNAME='",
                                            {
                                                "Fn::GetAtt": [
                                                    "Bigip2Instance",
                                                    "PrivateDnsName"
                                                ]
                                            },
                                            "'\n",
                                            "PEER_MGMTIP='",
                                            {
                                                "Fn::GetAtt": [
                                                    "Bigip2ManagementInterface",
                                                    "PrimaryPrivateIpAddress"
                                                ]
                                            },
                                            "'\n",
                                            "PEER_EXTPRIVIP='",
                                            {
                                                "Fn::Select": [
                                                    "0",
                                                    {
                                                        "Fn::GetAtt": [
                                                            "Bigip2subnet1Az2Interface",
                                                            "SecondaryPrivateIpAddresses"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "'\n",
                                            "VIPEIP='",
                                            {
                                                "Ref": "Bigip1VipEipAddress"
                                            },
                                            "'\n",
                                            "IAM_ACCESS_KEY='",
                                            {
                                                "Ref": "iamAccessKey"
                                            },
                                            "'\n",
                                            "IAM_SECRET_KEY='",
                                            {
                                                "Ref": "iamSecretKey"
                                            },
                                            "'\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/tmp/firstrun.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            ". /tmp/firstrun.config\n",
                                            ". /tmp/firstrun.utils\n",
                                            "FILE=/tmp/firstrun.log\n",
                                            "if [ ! -e $FILE ]\n",
                                            " then\n",
                                            "     touch $FILE\n",
                                            "     nohup $0 0<&- &>/dev/null &\n",
                                            "     exit\n",
                                            "fi\n",
                                            "exec 1<&-\n",
                                            "exec 2<&-\n",
                                            "exec 1<>$FILE\n",
                                            "exec 2>&1\n",
                                            "date\n",
                                            "echo 'starting tmsh config'\n",
                                            "tmsh modify sys global-settings aws-access-key ${IAM_ACCESS_KEY}\n",
                                            "tmsh modify sys global-settings aws-secret-key ${IAM_SECRET_KEY}\n",
                                            "tmsh create net vlan external interfaces add { 1.1 } \n",
                                            "tmsh create net self ${EXTIP}/${EXTMASK} vlan external allow-service add { tcp:4353 udp:1026 tcp:6123 tcp:6124 tcp:6125 tcp:6126 tcp:6127 tcp:6128 }\n",
                                            "tmsh create sys folder /LOCAL_ONLY device-group none traffic-group traffic-group-local-only\n",
                                            "tmsh create net route /LOCAL_ONLY/default network default gw ${GATEWAY}\n",
                                            "tmsh modify sys db dhclient.mgmt { value disable }\n",
                                            "tmsh modify cm device ${HOSTNAME} configsync-ip ${EXTIP} unicast-address { { effective-ip ${EXTIP} effective-port 1026 ip ${EXTIP} } }\n",
                                            "tmsh save /sys config\n",
                                            "checkStatusnoret\n",
                                            "sleep 20 \n",
                                            "tmsh save /sys config\n",
                                            "echo 'sleeping additional 120 secs to wait for peer to boot'\n",
                                            "sleep 120\n",
                                            "tmsh modify cm trust-domain Root ca-devices add { ${PEER_MGMTIP} } name ${PEER_HOSTNAME} username admin password \"'${BIGIP_ADMIN_PASSWORD}'\"\n",
                                            "tmsh create cm device-group my_sync_failover_group type sync-failover devices add { ${HOSTNAME} ${PEER_HOSTNAME} } auto-sync enabled\n",
                                            "tmsh run cm config-sync to-group my_sync_failover_group\n",
                                            "tmsh create ltm pool ${APPNAME}-pool members add { ${POOLMEM}:${POOLMEMPORT} } monitor http\n",
                                            "curl -o /home/admin/asm-policy-linux-high.xml http://cdn.f5.com/product/templates/utils/asm-policy-linux-high.xml \n",
                                            "tmsh load asm policy file /home/admin/asm-policy-linux-high.xml\n",
                                            "# modify asm policy names below (ex. /Common/linux-high) to match name in xml\n",
                                            "tmsh modify asm policy /Common/linux-high active\n",
                                            "tmsh create ltm policy app-ltm-policy strategy first-match legacy\n",
                                            "tmsh modify ltm policy app-ltm-policy controls add { asm }\n",
                                            "tmsh modify ltm policy app-ltm-policy rules add { associate-asm-policy { actions replace-all-with { 0 { asm request enable policy /Common/linux-high } } } }\n",
                                            "tmsh create ltm virtual /Common/AZ1-${APPNAME}-${VIRTUALSERVERPORT} { destination ${EXTPRIVIP}:${VIRTUALSERVERPORT} mask 255.255.255.255 ip-protocol tcp policies replace-all-with { app-ltm-policy { } } pool /Common/${APPNAME}-pool profiles replace-all-with { http { } tcp { } websecurity { } } security-log-profiles replace-all-with { \"Log illegal requests\" } source 0.0.0.0/0 source-address-translation { type automap } translate-address enabled translate-port enabled}\n",
                                            "tmsh create ltm virtual /Common/AZ2-${APPNAME}-${VIRTUALSERVERPORT} { destination ${PEER_EXTPRIVIP}:${VIRTUALSERVERPORT} mask 255.255.255.255 ip-protocol tcp policies replace-all-with { app-ltm-policy { } } pool /Common/${APPNAME}-pool profiles replace-all-with { http { } tcp { } websecurity { } } security-log-profiles replace-all-with { \"Log illegal requests\" } source 0.0.0.0/0 source-address-translation { type automap } translate-address enabled translate-port enabled}\n",
                                            "tmsh modify ltm virtual-address ${EXTPRIVIP} traffic-group none\n",
                                            "tmsh modify ltm virtual-address ${PEER_EXTPRIVIP} traffic-group none\n",
                                            "curl -sSk -o /tmp/f5.aws_advanced_ha.v1.2.0rc1.tmpl --max-time 15 https://cdn.f5.com/product/templates/f5.aws_advanced_ha.v1.2.0rc1.tmpl\n",
                                            "tmsh load sys application template /tmp/f5.aws_advanced_ha.v1.2.0rc1.tmpl\n",
                                            "tmsh create /sys application service HA_Across_AZs template f5.aws_advanced_ha.v1.2.0rc1 tables add { eip_mappings__mappings { column-names { eip az1_vip az2_vip } rows { { row { ${VIPEIP} /Common/${EXTPRIVIP} /Common/${PEER_EXTPRIVIP} } } } } } variables add { eip_mappings__inbound { value yes } }\n",
                                            "tmsh modify sys application service HA_Across_AZs.app/HA_Across_AZs execute-action definition\n",
                                            "tmsh run cm config-sync to-group my_sync_failover_group\n",
                                            "sleep 15\n",
                                            "curl -sSk -u admin:\"${BIGIP_ADMIN_PASSWORD}\" -H 'Content-Type: application/json' -X PATCH -d '{\"execute-action\":\"definition\"}' https://${PEER_MGMTIP}/mgmt/tm/sys/application/service/~Common~HA_Across_AZs.app~HA_Across_AZs\n",
                                            "tmsh modify cm device-group datasync-global-dg devices modify { ${HOSTNAME} { set-sync-leader } }\n",
                                            "tmsh run cm config-sync to-group datasync-global-dg\n",
                                            "tmsh save /sys config\n",
                                            "date\n",
                                            "# remove_license_from_bigiq.sh uses firstrun.config but for security purposes, typically want to remove firstrun.config\n",
                                            "# rm /tmp/firstrun.config\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/tmp/firstrun.utils": {
                                "group": "root",
                                "mode": "000755",
                                "owner": "root",
                                "source": "http://cdn.f5.com/product/templates/utils/firstrun.utils"
                            }
                        },
                        "sources": {
                            "/shared": "https://f5-cloud-libs.s3.amazonaws.com/f5-cloud-libs.tar.gz"
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "BigipRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Ref": "imageName"
                        }
                    ]
                },
                "InstanceType": {
                    "Ref": "instanceType"
                },
                "KeyName": {
                    "Ref": "sshKey"
                },
                "NetworkInterfaces": [
                    {
                        "Description": "Management Interface",
                        "DeviceIndex": "0",
                        "NetworkInterfaceId": {
                            "Ref": "Bigip1ManagementInterface"
                        }
                    },
                    {
                        "Description": "Public or External Interface",
                        "DeviceIndex": "1",
                        "NetworkInterfaceId": {
                            "Ref": "Bigip1subnet1Az1Interface"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "applicationTag"
                        }
                    },
                    {
                        "Key": "Costcenter",
                        "Value": {
                            "Ref": "costcenterTag"
                        }
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "environmentTag"
                        }
                    },
                    {
                        "Key": "Group",
                        "Value": {
                            "Ref": "groupTag"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "Big-IP: ",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "ownerTag"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r ",
                                "Bigip1Instance",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "Bigip1ManagementEipAddress": {
            "Properties": {
                "Domain": "vpc"
            },
            "Type": "AWS::EC2::EIP"
        },
        "Bigip1ManagementEipAssociation": {
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "Bigip1ManagementEipAddress",
                        "AllocationId"
                    ]
                },
                "NetworkInterfaceId": {
                    "Ref": "Bigip1ManagementInterface"
                }
            },
            "Type": "AWS::EC2::EIPAssociation"
        },
        "Bigip1ManagementInterface": {
            "Properties": {
                "Description": "Management Interface for the BIG-IP",
                "GroupSet": [
                    {
                        "Ref": "bigipManagementSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "managementSubnetAz1"
                }
            },
            "Type": "AWS::EC2::NetworkInterface"
        },
        "Bigip1VipEipAddress": {
            "Properties": {
                "Domain": "vpc"
            },
            "Type": "AWS::EC2::EIP"
        },
        "Bigip1VipEipAssociation": {
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "Bigip1VipEipAddress",
                        "AllocationId"
                    ]
                },
                "NetworkInterfaceId": {
                    "Ref": "Bigip1subnet1Az1Interface"
                },
                "PrivateIpAddress": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAtt": [
                                "Bigip1subnet1Az1Interface",
                                "SecondaryPrivateIpAddresses"
                            ]
                        }
                    ]
                }
            },
            "Type": "AWS::EC2::EIPAssociation"
        },
        "Bigip1subnet1Az1Interface": {
            "Properties": {
                "Description": "Public External Interface for the BIG-IP",
                "GroupSet": [
                    {
                        "Ref": "bigipExternalSecurityGroup"
                    }
                ],
                "SecondaryPrivateIpAddressCount": "1",
                "SubnetId": {
                    "Ref": "subnet1Az1"
                }
            },
            "Type": "AWS::EC2::NetworkInterface"
        },
        "Bigip1subnet1Az1SelfEipAddress": {
            "Properties": {
                "Domain": "vpc"
            },
            "Type": "AWS::EC2::EIP"
        },
        "Bigip1subnet1Az1SelfEipAssociation": {
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "Bigip1subnet1Az1SelfEipAddress",
                        "AllocationId"
                    ]
                },
                "NetworkInterfaceId": {
                    "Ref": "Bigip1subnet1Az1Interface"
                },
                "PrivateIpAddress": {
                    "Fn::GetAtt": [
                        "Bigip1subnet1Az1Interface",
                        "PrimaryPrivateIpAddress"
                    ]
                }
            },
            "Type": "AWS::EC2::EIPAssociation"
        },
        "Bigip2Instance": {
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "001-onboard-BIG-IP": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "NAME_SERVER=`/shared/f5-cloud-libs/scripts/aws/getNameServer.sh eth1`;",
                                            "f5-rest-node /shared/f5-cloud-libs/scripts/onboard.js",
                                            "--log-level verbose",
                                            "-o  /var/log/onboard.log",
                                            "--background",
                                            "--no-reboot",
                                            "--host localhost",
                                            "--user admin",
                                            "--password '",
                                            {
                                                "Ref": "adminPassword"
                                            },
                                            "'",
                                            "--set-password admin:'",
                                            {
                                                "Ref": "adminPassword"
                                            },
                                            "'",
                                            "--hostname `curl http://169.254.169.254/latest/meta-data/hostname`",
                                            "--ntp 0.us.pool.ntp.org",
                                            "--ntp 1.us.pool.ntp.org",
                                            "--tz UTC",
                                            "--dns ${NAME_SERVER}",
                                            "--module ltm:nominal",
                                            "--module asm:nominal"
                                        ]
                                    ]
                                }
                            },
                            "firstrun-BIG-IP": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "f5-rest-node /shared/f5-cloud-libs/scripts/runScript.js",
                                            "--wait-for ONBOARD_DONE",
                                            "--file /tmp/firstrun.sh",
                                            "--log-level verbose",
                                            "-o /var/log/firstrun_1.log",
                                            "--background"
                                        ]
                                    ]
                                }
                            }
                        },
                        "files": {
                            "/tmp/firstrun.config": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "HOSTNAME=`curl http://169.254.169.254/latest/meta-data/hostname`\n",
                                            "TZ='UTC'\n",
                                            "BIGIP_ADMIN_USERNAME='",
                                            {
                                                "Ref": "adminUsername"
                                            },
                                            "'\n",
                                            "BIGIP_ADMIN_PASSWORD='",
                                            {
                                                "Ref": "adminPassword"
                                            },
                                            "'\n",
                                            "GATEWAY_MAC=`ifconfig eth1 | egrep HWaddr | awk '{print tolower($5)}'`\n",
                                            "GATEWAY_CIDR_BLOCK=`curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`\n",
                                            "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}\n",
                                            "GATEWAY_PREFIX=${GATEWAY_CIDR_BLOCK#*/}\n",
                                            "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`\n",
                                            "VPC_CIDR_BLOCK=`curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/vpc-ipv4-cidr-block`\n",
                                            "VPC_NET=${VPC_CIDR_BLOCK%/*}\n",
                                            "VPC_PREFIX=${VPC_CIDR_BLOCK#*/}\n",
                                            "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+2 }'`\n",
                                            "MGMTIP='",
                                            {
                                                "Fn::GetAtt": [
                                                    "Bigip2ManagementInterface",
                                                    "PrimaryPrivateIpAddress"
                                                ]
                                            },
                                            "'\n",
                                            "EXTIP='",
                                            {
                                                "Fn::GetAtt": [
                                                    "Bigip2subnet1Az2Interface",
                                                    "PrimaryPrivateIpAddress"
                                                ]
                                            },
                                            "'\n",
                                            "EXTPRIVIP='",
                                            {
                                                "Fn::Select": [
                                                    "0",
                                                    {
                                                        "Fn::GetAtt": [
                                                            "Bigip2subnet1Az2Interface",
                                                            "SecondaryPrivateIpAddresses"
                                                        ]
                                                    }
                                                ]
                                            },
                                            "'\n",
                                            "EXTMASK='24'\n",
                                            "POOLMEM='",
                                            {
                                                "Ref": "webserverPrivateIp"
                                            },
                                            "'\n",
                                            "POOLMEMPORT=80\n",
                                            "APPNAME='demo-app-1'\n",
                                            "VIRTUALSERVERPORT=80\n",
                                            "CRT='default.crt'\n",
                                            "KEY='default.key'\n",
                                            "IAM_ACCESS_KEY='",
                                            {
                                                "Ref": "iamAccessKey"
                                            },
                                            "'\n",
                                            "IAM_SECRET_KEY='",
                                            {
                                                "Ref": "iamSecretKey"
                                            },
                                            "'\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/tmp/firstrun.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            ". /tmp/firstrun.config\n",
                                            ". /tmp/firstrun.utils\n",
                                            "FILE=/tmp/firstrun.log\n",
                                            "if [ ! -e $FILE ]\n",
                                            " then\n",
                                            "     touch $FILE\n",
                                            "     nohup $0 0<&- &>/dev/null &\n",
                                            "     exit\n",
                                            "fi\n",
                                            "exec 1<&-\n",
                                            "exec 2<&-\n",
                                            "exec 1<>$FILE\n",
                                            "exec 2>&1\n",
                                            "date\n",
                                            "echo 'starting tmsh config'\n",
                                            "tmsh modify sys global-settings aws-access-key ${IAM_ACCESS_KEY}\n",
                                            "tmsh modify sys global-settings aws-secret-key ${IAM_SECRET_KEY}\n",
                                            "tmsh create net vlan external interfaces add { 1.1 } \n",
                                            "tmsh create net self ${EXTIP}/${EXTMASK} vlan external allow-service add { tcp:4353 udp:1026 tcp:6123 tcp:6124 tcp:6125 tcp:6126 tcp:6127 tcp:6128 }\n",
                                            "tmsh create sys folder /LOCAL_ONLY device-group none traffic-group traffic-group-local-only\n",
                                            "tmsh create net route /LOCAL_ONLY/default network default gw ${GATEWAY}\n",
                                            "tmsh modify sys db dhclient.mgmt { value disable }\n",
                                            "tmsh modify cm device ${HOSTNAME} configsync-ip ${EXTIP} unicast-address { { effective-ip ${EXTIP} effective-port 1026 ip ${EXTIP} } }\n",
                                            "tmsh save /sys config\n",
                                            "checkStatusnoret\n",
                                            "sleep 20 \n",
                                            "tmsh save /sys config\n",
                                            "tmsh save /sys config\n",
                                            "date\n",
                                            "# remove_license_from_bigiq.sh uses firstrun.config but for security purposes, typically want to remove firstrun.config\n",
                                            "# rm /tmp/firstrun.config\n"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/tmp/firstrun.utils": {
                                "group": "root",
                                "mode": "000755",
                                "owner": "root",
                                "source": "http://cdn.f5.com/product/templates/utils/firstrun.utils"
                            }
                        },
                        "sources": {
                            "/shared": "https://f5-cloud-libs.s3.amazonaws.com/f5-cloud-libs.tar.gz"
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "BigipRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Ref": "imageName"
                        }
                    ]
                },
                "InstanceType": {
                    "Ref": "instanceType"
                },
                "KeyName": {
                    "Ref": "sshKey"
                },
                "NetworkInterfaces": [
                    {
                        "Description": "Management Interface",
                        "DeviceIndex": "0",
                        "NetworkInterfaceId": {
                            "Ref": "Bigip2ManagementInterface"
                        }
                    },
                    {
                        "Description": "Public or External Interface",
                        "DeviceIndex": "1",
                        "NetworkInterfaceId": {
                            "Ref": "Bigip2subnet1Az2Interface"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "applicationTag"
                        }
                    },
                    {
                        "Key": "Costcenter",
                        "Value": {
                            "Ref": "costcenterTag"
                        }
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "environmentTag"
                        }
                    },
                    {
                        "Key": "Group",
                        "Value": {
                            "Ref": "groupTag"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "Big-IP: ",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "ownerTag"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r ",
                                "Bigip2Instance",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "Bigip2ManagementEipAddress": {
            "Properties": {
                "Domain": "vpc"
            },
            "Type": "AWS::EC2::EIP"
        },
        "Bigip2ManagementEipAssociation": {
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "Bigip2ManagementEipAddress",
                        "AllocationId"
                    ]
                },
                "NetworkInterfaceId": {
                    "Ref": "Bigip2ManagementInterface"
                }
            },
            "Type": "AWS::EC2::EIPAssociation"
        },
        "Bigip2ManagementInterface": {
            "Properties": {
                "Description": "Management Interface for the BIG-IP",
                "GroupSet": [
                    {
                        "Ref": "bigipManagementSecurityGroup"
                    }
                ],
                "SubnetId": {
                    "Ref": "managementSubnetAz2"
                }
            },
            "Type": "AWS::EC2::NetworkInterface"
        },
        "Bigip2subnet1Az2Interface": {
            "Properties": {
                "Description": "Public External Interface for the BIG-IP",
                "GroupSet": [
                    {
                        "Ref": "bigipExternalSecurityGroup"
                    }
                ],
                "SecondaryPrivateIpAddressCount": "1",
                "SubnetId": {
                    "Ref": "subnet1Az2"
                }
            },
            "Type": "AWS::EC2::NetworkInterface"
        },
        "Bigip2subnet1Az2SelfEipAddress": {
            "Properties": {
                "Domain": "vpc"
            },
            "Type": "AWS::EC2::EIP"
        },
        "Bigip2subnet1Az2SelfEipAssociation": {
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "Bigip2subnet1Az2SelfEipAddress",
                        "AllocationId"
                    ]
                },
                "NetworkInterfaceId": {
                    "Ref": "Bigip2subnet1Az2Interface"
                },
                "PrivateIpAddress": {
                    "Fn::GetAtt": [
                        "Bigip2subnet1Az2Interface",
                        "PrimaryPrivateIpAddress"
                    ]
                }
            },
            "Type": "AWS::EC2::EIPAssociation"
        }
    }
}
